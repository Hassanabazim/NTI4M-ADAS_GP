
NTI-ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f14  08001f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f18  08001f18  00011f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08001f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001f28  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031b8  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e96  00000000  00000000  000231ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00024088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00024538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018d5  00000000  00000000  00024900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003864  00000000  00000000  000261d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a804  00000000  00000000  00029a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003423d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011f8  00000000  00000000  00034290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001efc 	.word	0x08001efc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	08001efc 	.word	0x08001efc

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_fmul>:
 8000c08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c10:	bf1e      	ittt	ne
 8000c12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c16:	ea92 0f0c 	teqne	r2, ip
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d06f      	beq.n	8000d00 <__aeabi_fmul+0xf8>
 8000c20:	441a      	add	r2, r3
 8000c22:	ea80 0c01 	eor.w	ip, r0, r1
 8000c26:	0240      	lsls	r0, r0, #9
 8000c28:	bf18      	it	ne
 8000c2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c2e:	d01e      	beq.n	8000c6e <__aeabi_fmul+0x66>
 8000c30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c48:	bf3e      	ittt	cc
 8000c4a:	0049      	lslcc	r1, r1, #1
 8000c4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c50:	005b      	lslcc	r3, r3, #1
 8000c52:	ea40 0001 	orr.w	r0, r0, r1
 8000c56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c5a:	2afd      	cmp	r2, #253	; 0xfd
 8000c5c:	d81d      	bhi.n	8000c9a <__aeabi_fmul+0x92>
 8000c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c66:	bf08      	it	eq
 8000c68:	f020 0001 	biceq.w	r0, r0, #1
 8000c6c:	4770      	bx	lr
 8000c6e:	f090 0f00 	teq	r0, #0
 8000c72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c76:	bf08      	it	eq
 8000c78:	0249      	lsleq	r1, r1, #9
 8000c7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c82:	3a7f      	subs	r2, #127	; 0x7f
 8000c84:	bfc2      	ittt	gt
 8000c86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c8e:	4770      	bxgt	lr
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	dc5d      	bgt.n	8000d58 <__aeabi_fmul+0x150>
 8000c9c:	f112 0f19 	cmn.w	r2, #25
 8000ca0:	bfdc      	itt	le
 8000ca2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ca6:	4770      	bxle	lr
 8000ca8:	f1c2 0200 	rsb	r2, r2, #0
 8000cac:	0041      	lsls	r1, r0, #1
 8000cae:	fa21 f102 	lsr.w	r1, r1, r2
 8000cb2:	f1c2 0220 	rsb	r2, r2, #32
 8000cb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cbe:	f140 0000 	adc.w	r0, r0, #0
 8000cc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cc6:	bf08      	it	eq
 8000cc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ccc:	4770      	bx	lr
 8000cce:	f092 0f00 	teq	r2, #0
 8000cd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0040      	lsleq	r0, r0, #1
 8000cda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cde:	3a01      	subeq	r2, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xce>
 8000ce2:	ea40 000c 	orr.w	r0, r0, ip
 8000ce6:	f093 0f00 	teq	r3, #0
 8000cea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cee:	bf02      	ittt	eq
 8000cf0:	0049      	lsleq	r1, r1, #1
 8000cf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cf6:	3b01      	subeq	r3, #1
 8000cf8:	d0f9      	beq.n	8000cee <__aeabi_fmul+0xe6>
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	e78f      	b.n	8000c20 <__aeabi_fmul+0x18>
 8000d00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d04:	ea92 0f0c 	teq	r2, ip
 8000d08:	bf18      	it	ne
 8000d0a:	ea93 0f0c 	teqne	r3, ip
 8000d0e:	d00a      	beq.n	8000d26 <__aeabi_fmul+0x11e>
 8000d10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d14:	bf18      	it	ne
 8000d16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d1a:	d1d8      	bne.n	8000cce <__aeabi_fmul+0xc6>
 8000d1c:	ea80 0001 	eor.w	r0, r0, r1
 8000d20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d24:	4770      	bx	lr
 8000d26:	f090 0f00 	teq	r0, #0
 8000d2a:	bf17      	itett	ne
 8000d2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d30:	4608      	moveq	r0, r1
 8000d32:	f091 0f00 	teqne	r1, #0
 8000d36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d3a:	d014      	beq.n	8000d66 <__aeabi_fmul+0x15e>
 8000d3c:	ea92 0f0c 	teq	r2, ip
 8000d40:	d101      	bne.n	8000d46 <__aeabi_fmul+0x13e>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d10f      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d46:	ea93 0f0c 	teq	r3, ip
 8000d4a:	d103      	bne.n	8000d54 <__aeabi_fmul+0x14c>
 8000d4c:	024b      	lsls	r3, r1, #9
 8000d4e:	bf18      	it	ne
 8000d50:	4608      	movne	r0, r1
 8000d52:	d108      	bne.n	8000d66 <__aeabi_fmul+0x15e>
 8000d54:	ea80 0001 	eor.w	r0, r0, r1
 8000d58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bx	lr
 8000d66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d6e:	4770      	bx	lr

08000d70 <__aeabi_fdiv>:
 8000d70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d78:	bf1e      	ittt	ne
 8000d7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7e:	ea92 0f0c 	teqne	r2, ip
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d069      	beq.n	8000e5c <__aeabi_fdiv+0xec>
 8000d88:	eba2 0203 	sub.w	r2, r2, r3
 8000d8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d90:	0249      	lsls	r1, r1, #9
 8000d92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d96:	d037      	beq.n	8000e08 <__aeabi_fdiv+0x98>
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000da0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf38      	it	cc
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000db2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000db6:	428b      	cmp	r3, r1
 8000db8:	bf24      	itt	cs
 8000dba:	1a5b      	subcs	r3, r3, r1
 8000dbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dc4:	bf24      	itt	cs
 8000dc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dd2:	bf24      	itt	cs
 8000dd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ddc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000de0:	bf24      	itt	cs
 8000de2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000de6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	bf18      	it	ne
 8000dee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000df2:	d1e0      	bne.n	8000db6 <__aeabi_fdiv+0x46>
 8000df4:	2afd      	cmp	r2, #253	; 0xfd
 8000df6:	f63f af50 	bhi.w	8000c9a <__aeabi_fmul+0x92>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e10:	327f      	adds	r2, #127	; 0x7f
 8000e12:	bfc2      	ittt	gt
 8000e14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1c:	4770      	bxgt	lr
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e22:	f04f 0300 	mov.w	r3, #0
 8000e26:	3a01      	subs	r2, #1
 8000e28:	e737      	b.n	8000c9a <__aeabi_fmul+0x92>
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xc2>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fdiv+0xda>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e795      	b.n	8000d88 <__aeabi_fdiv+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	d108      	bne.n	8000e78 <__aeabi_fdiv+0x108>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	f47f af7d 	bne.w	8000d66 <__aeabi_fmul+0x15e>
 8000e6c:	ea93 0f0c 	teq	r3, ip
 8000e70:	f47f af70 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e776      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e78:	ea93 0f0c 	teq	r3, ip
 8000e7c:	d104      	bne.n	8000e88 <__aeabi_fdiv+0x118>
 8000e7e:	024b      	lsls	r3, r1, #9
 8000e80:	f43f af4c 	beq.w	8000d1c <__aeabi_fmul+0x114>
 8000e84:	4608      	mov	r0, r1
 8000e86:	e76e      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1ca      	bne.n	8000e2a <__aeabi_fdiv+0xba>
 8000e94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e98:	f47f af5c 	bne.w	8000d54 <__aeabi_fmul+0x14c>
 8000e9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	f47f af3c 	bne.w	8000d1c <__aeabi_fmul+0x114>
 8000ea4:	e75f      	b.n	8000d66 <__aeabi_fmul+0x15e>
 8000ea6:	bf00      	nop

08000ea8 <__gesf2>:
 8000ea8:	f04f 3cff 	mov.w	ip, #4294967295
 8000eac:	e006      	b.n	8000ebc <__cmpsf2+0x4>
 8000eae:	bf00      	nop

08000eb0 <__lesf2>:
 8000eb0:	f04f 0c01 	mov.w	ip, #1
 8000eb4:	e002      	b.n	8000ebc <__cmpsf2+0x4>
 8000eb6:	bf00      	nop

08000eb8 <__cmpsf2>:
 8000eb8:	f04f 0c01 	mov.w	ip, #1
 8000ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ec0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ec8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ecc:	bf18      	it	ne
 8000ece:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ed2:	d011      	beq.n	8000ef8 <__cmpsf2+0x40>
 8000ed4:	b001      	add	sp, #4
 8000ed6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eda:	bf18      	it	ne
 8000edc:	ea90 0f01 	teqne	r0, r1
 8000ee0:	bf58      	it	pl
 8000ee2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ee6:	bf88      	it	hi
 8000ee8:	17c8      	asrhi	r0, r1, #31
 8000eea:	bf38      	it	cc
 8000eec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ef0:	bf18      	it	ne
 8000ef2:	f040 0001 	orrne.w	r0, r0, #1
 8000ef6:	4770      	bx	lr
 8000ef8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000efc:	d102      	bne.n	8000f04 <__cmpsf2+0x4c>
 8000efe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f02:	d105      	bne.n	8000f10 <__cmpsf2+0x58>
 8000f04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f08:	d1e4      	bne.n	8000ed4 <__cmpsf2+0x1c>
 8000f0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f0e:	d0e1      	beq.n	8000ed4 <__cmpsf2+0x1c>
 8000f10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_cfrcmple>:
 8000f18:	4684      	mov	ip, r0
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	4661      	mov	r1, ip
 8000f1e:	e7ff      	b.n	8000f20 <__aeabi_cfcmpeq>

08000f20 <__aeabi_cfcmpeq>:
 8000f20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f22:	f7ff ffc9 	bl	8000eb8 <__cmpsf2>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	bf48      	it	mi
 8000f2a:	f110 0f00 	cmnmi.w	r0, #0
 8000f2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f30 <__aeabi_fcmpeq>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff fff4 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f38:	bf0c      	ite	eq
 8000f3a:	2001      	moveq	r0, #1
 8000f3c:	2000      	movne	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmplt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffea 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_fcmple>:
 8000f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f5c:	f7ff ffe0 	bl	8000f20 <__aeabi_cfcmpeq>
 8000f60:	bf94      	ite	ls
 8000f62:	2001      	movls	r0, #1
 8000f64:	2000      	movhi	r0, #0
 8000f66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6a:	bf00      	nop

08000f6c <__aeabi_fcmpge>:
 8000f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f70:	f7ff ffd2 	bl	8000f18 <__aeabi_cfrcmple>
 8000f74:	bf94      	ite	ls
 8000f76:	2001      	movls	r0, #1
 8000f78:	2000      	movhi	r0, #0
 8000f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7e:	bf00      	nop

08000f80 <__aeabi_fcmpgt>:
 8000f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f84:	f7ff ffc8 	bl	8000f18 <__aeabi_cfrcmple>
 8000f88:	bf34      	ite	cc
 8000f8a:	2001      	movcc	r0, #1
 8000f8c:	2000      	movcs	r0, #0
 8000f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f92:	bf00      	nop

08000f94 <__aeabi_f2uiz>:
 8000f94:	0042      	lsls	r2, r0, #1
 8000f96:	d20e      	bcs.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f9c:	d30b      	bcc.n	8000fb6 <__aeabi_f2uiz+0x22>
 8000f9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fa6:	d409      	bmi.n	8000fbc <__aeabi_f2uiz+0x28>
 8000fa8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb4:	4770      	bx	lr
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	4770      	bx	lr
 8000fbc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc0:	d101      	bne.n	8000fc6 <__aeabi_f2uiz+0x32>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_f2uiz+0x38>
 8000fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fca:	4770      	bx	lr
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <ADAS_Distance_Manager>:
	MGPIO_enSetPinDirection(RIGHT_LED, OUT_2MHZ_PUSH_PULL);
	MGPIO_enSetPinDirection(LEFT_LED, OUT_2MHZ_PUSH_PULL);
}

void ADAS_Distance_Manager(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	HULTRASONIC_enGetRead(&Dist_MG[0]);
 8000fd8:	481a      	ldr	r0, [pc, #104]	; (8001044 <ADAS_Distance_Manager+0x70>)
 8000fda:	f000 fa8b 	bl	80014f4 <HULTRASONIC_enGetRead>
	Dist_MG[1] = RPLIDAR_GetDistanceValue(Right_Angle_One,Right_Angle_Two);
 8000fde:	491a      	ldr	r1, [pc, #104]	; (8001048 <ADAS_Distance_Manager+0x74>)
 8000fe0:	481a      	ldr	r0, [pc, #104]	; (800104c <ADAS_Distance_Manager+0x78>)
 8000fe2:	f000 fa75 	bl	80014d0 <RPLIDAR_GetDistanceValue>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffd3 	bl	8000f94 <__aeabi_f2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <ADAS_Distance_Manager+0x70>)
 8000ff4:	805a      	strh	r2, [r3, #2]
	Dist_MG[2] = RPLIDAR_GetDistanceValue(Left_Angle_One,Left_Angle_Two);
 8000ff6:	4916      	ldr	r1, [pc, #88]	; (8001050 <ADAS_Distance_Manager+0x7c>)
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <ADAS_Distance_Manager+0x80>)
 8000ffa:	f000 fa69 	bl	80014d0 <RPLIDAR_GetDistanceValue>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ffc7 	bl	8000f94 <__aeabi_f2uiz>
 8001006:	4603      	mov	r3, r0
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <ADAS_Distance_Manager+0x70>)
 800100c:	809a      	strh	r2, [r3, #4]
	Dist_MG[3] = RPLIDAR_GetDistanceValue(Front_Angle_One,Front_Angle_Two);
 800100e:	4912      	ldr	r1, [pc, #72]	; (8001058 <ADAS_Distance_Manager+0x84>)
 8001010:	4812      	ldr	r0, [pc, #72]	; (800105c <ADAS_Distance_Manager+0x88>)
 8001012:	f000 fa5d 	bl	80014d0 <RPLIDAR_GetDistanceValue>
 8001016:	4603      	mov	r3, r0
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ffbb 	bl	8000f94 <__aeabi_f2uiz>
 800101e:	4603      	mov	r3, r0
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <ADAS_Distance_Manager+0x70>)
 8001024:	80da      	strh	r2, [r3, #6]
	Dist_MG[4] = RPLIDAR_GetDistanceValue(Back_Angle_One,Back_Angle_Two);
 8001026:	490e      	ldr	r1, [pc, #56]	; (8001060 <ADAS_Distance_Manager+0x8c>)
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <ADAS_Distance_Manager+0x90>)
 800102a:	f000 fa51 	bl	80014d0 <RPLIDAR_GetDistanceValue>
 800102e:	4603      	mov	r3, r0
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ffaf 	bl	8000f94 <__aeabi_f2uiz>
 8001036:	4603      	mov	r3, r0
 8001038:	b29a      	uxth	r2, r3
 800103a:	4b02      	ldr	r3, [pc, #8]	; (8001044 <ADAS_Distance_Manager+0x70>)
 800103c:	811a      	strh	r2, [r3, #8]
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000030 	.word	0x20000030
 8001048:	42f00000 	.word	0x42f00000
 800104c:	42700000 	.word	0x42700000
 8001050:	43960000 	.word	0x43960000
 8001054:	43700000 	.word	0x43700000
 8001058:	43520000 	.word	0x43520000
 800105c:	43160000 	.word	0x43160000
 8001060:	41f00000 	.word	0x41f00000
 8001064:	43a50000 	.word	0x43a50000

08001068 <ADAS_laneKeeping>:

extern u8 Indication[7];
extern u16 Dist_MG [5];

void ADAS_laneKeeping(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	IR_PinValue_t leftIRValue = IR_IR_PinValueReadLeft();
 800106e:	f000 f913 	bl	8001298 <IR_IR_PinValueReadLeft>
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	IR_PinValue_t rightIRValue = IR_IR_PinValueReadRight();
 8001076:	f000 f932 	bl	80012de <IR_IR_PinValueReadRight>
 800107a:	4603      	mov	r3, r0
 800107c:	71bb      	strb	r3, [r7, #6]

	if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10a      	bne.n	800109a <ADAS_laneKeeping+0x32>
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d107      	bne.n	800109a <ADAS_laneKeeping+0x32>
	{
		HDCMOTOR_voidDiretionalStop(); //forward wheel   no left no right
 800108a:	f000 f8e9 	bl	8001260 <HDCMOTOR_voidDiretionalStop>
		HDCMOTOR_voidForward(); //back wheel
 800108e:	f000 f8bd 	bl	800120c <HDCMOTOR_voidForward>
		TIM3_PWM_CH1_Generate(90); //speed
 8001092:	205a      	movs	r0, #90	; 0x5a
 8001094:	f000 fb04 	bl	80016a0 <TIM3_PWM_CH1_Generate>
 8001098:	e03b      	b.n	8001112 <ADAS_laneKeeping+0xaa>
	}
	else if (leftIRValue == IR_LOW && rightIRValue==IR_HIGH)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d117      	bne.n	80010d0 <ADAS_laneKeeping+0x68>
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d114      	bne.n	80010d0 <ADAS_laneKeeping+0x68>
	{
		HDCMOTOR_voidForwardBackwardStop();
 80010a6:	f000 f8e9 	bl	800127c <HDCMOTOR_voidForwardBackwardStop>
		HDCMOTOR_voidTurnRight();
 80010aa:	f000 f8bd 	bl	8001228 <HDCMOTOR_voidTurnRight>
		HDCMOTOR_voidForward();
 80010ae:	f000 f8ad 	bl	800120c <HDCMOTOR_voidForward>
		TIM3_PWM_CH1_Generate(70);
 80010b2:	2046      	movs	r0, #70	; 0x46
 80010b4:	f000 faf4 	bl	80016a0 <TIM3_PWM_CH1_Generate>

		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d126      	bne.n	800110c <ADAS_laneKeeping+0xa4>
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d123      	bne.n	800110c <ADAS_laneKeeping+0xa4>
		{
			HDCMOTOR_voidForward();
 80010c4:	f000 f8a2 	bl	800120c <HDCMOTOR_voidForward>
			TIM3_PWM_CH1_Generate(90);
 80010c8:	205a      	movs	r0, #90	; 0x5a
 80010ca:	f000 fae9 	bl	80016a0 <TIM3_PWM_CH1_Generate>
		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 80010ce:	e01d      	b.n	800110c <ADAS_laneKeeping+0xa4>
		}

	}
	else if (rightIRValue == IR_LOW && leftIRValue== IR_HIGH)
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d117      	bne.n	8001106 <ADAS_laneKeeping+0x9e>
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d114      	bne.n	8001106 <ADAS_laneKeeping+0x9e>
	{
		HDCMOTOR_voidForwardBackwardStop();
 80010dc:	f000 f8ce 	bl	800127c <HDCMOTOR_voidForwardBackwardStop>
		HDCMOTOR_voidTurnLeft();
 80010e0:	f000 f8b0 	bl	8001244 <HDCMOTOR_voidTurnLeft>
		HDCMOTOR_voidForward();
 80010e4:	f000 f892 	bl	800120c <HDCMOTOR_voidForward>
		TIM3_PWM_CH1_Generate(70);
 80010e8:	2046      	movs	r0, #70	; 0x46
 80010ea:	f000 fad9 	bl	80016a0 <TIM3_PWM_CH1_Generate>
		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10d      	bne.n	8001110 <ADAS_laneKeeping+0xa8>
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d10a      	bne.n	8001110 <ADAS_laneKeeping+0xa8>
		{
			HDCMOTOR_voidForward();
 80010fa:	f000 f887 	bl	800120c <HDCMOTOR_voidForward>
			TIM3_PWM_CH1_Generate(90);
 80010fe:	205a      	movs	r0, #90	; 0x5a
 8001100:	f000 face 	bl	80016a0 <TIM3_PWM_CH1_Generate>
		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 8001104:	e004      	b.n	8001110 <ADAS_laneKeeping+0xa8>
		}
	}
	else
	{
		HDCMOTOR_voidForwardBackwardStop();
 8001106:	f000 f8b9 	bl	800127c <HDCMOTOR_voidForwardBackwardStop>
	}


}
 800110a:	e002      	b.n	8001112 <ADAS_laneKeeping+0xaa>
		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 800110c:	bf00      	nop
 800110e:	e000      	b.n	8001112 <ADAS_laneKeeping+0xaa>
		if(leftIRValue== IR_HIGH && rightIRValue==IR_HIGH)
 8001110:	bf00      	nop
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <ADAS_LaneChange>:

void ADAS_LaneChange(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	IR_PinValue_t leftIRValue2 = IR_IR_PinValueReadLeft();
 8001122:	f000 f8b9 	bl	8001298 <IR_IR_PinValueReadLeft>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	IR_PinValue_t rightIRValue2 = IR_IR_PinValueReadRight();
 800112a:	f000 f8d8 	bl	80012de <IR_IR_PinValueReadRight>
 800112e:	4603      	mov	r3, r0
 8001130:	71bb      	strb	r3, [r7, #6]
	u16 average =  ((Dist_MG[0] + Dist_MG[3]) / 2);
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <ADAS_LaneChange+0xe4>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <ADAS_LaneChange+0xe4>)
 800113a:	88db      	ldrh	r3, [r3, #6]
 800113c:	4413      	add	r3, r2
 800113e:	0fda      	lsrs	r2, r3, #31
 8001140:	4413      	add	r3, r2
 8001142:	105b      	asrs	r3, r3, #1
 8001144:	80bb      	strh	r3, [r7, #4]
	if (average < 30 && LaneState == LANE_KEEPING)
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	2b1d      	cmp	r3, #29
 800114a:	d825      	bhi.n	8001198 <ADAS_LaneChange+0x7c>
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <ADAS_LaneChange+0xe8>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d121      	bne.n	8001198 <ADAS_LaneChange+0x7c>
	{
		if(Indication[1] == NO_Object)
 8001154:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <ADAS_LaneChange+0xec>)
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d11a      	bne.n	8001192 <ADAS_LaneChange+0x76>
		{
			LaneState = LANE_CHANGE_RIGHT;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <ADAS_LaneChange+0xe8>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
			HDCMOTOR_voidTurnRight();
 8001162:	f000 f861 	bl	8001228 <HDCMOTOR_voidTurnRight>
			HDCMOTOR_voidForward();
 8001166:	f000 f851 	bl	800120c <HDCMOTOR_voidForward>
			TIM3_PWM_CH1_Generate(80);
 800116a:	2050      	movs	r0, #80	; 0x50
 800116c:	f000 fa98 	bl	80016a0 <TIM3_PWM_CH1_Generate>
			if (leftIRValue2 == IR_LOW && rightIRValue2==IR_LOW)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d13d      	bne.n	80011f2 <ADAS_LaneChange+0xd6>
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d13a      	bne.n	80011f2 <ADAS_LaneChange+0xd6>
			{
				HDCMOTOR_voidTurnLeft();
 800117c:	f000 f862 	bl	8001244 <HDCMOTOR_voidTurnLeft>
				HDCMOTOR_voidForward();
 8001180:	f000 f844 	bl	800120c <HDCMOTOR_voidForward>
				TIM3_PWM_CH1_Generate(60);
 8001184:	203c      	movs	r0, #60	; 0x3c
 8001186:	f000 fa8b 	bl	80016a0 <TIM3_PWM_CH1_Generate>
				LaneState = LANE_KEEPING;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <ADAS_LaneChange+0xe8>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
		if(Indication[1] == NO_Object)
 8001190:	e02f      	b.n	80011f2 <ADAS_LaneChange+0xd6>
			}
		}
		else
		{
			HDCMOTOR_voidForwardBackwardStop();
 8001192:	f000 f873 	bl	800127c <HDCMOTOR_voidForwardBackwardStop>
		if(Indication[1] == NO_Object)
 8001196:	e02c      	b.n	80011f2 <ADAS_LaneChange+0xd6>

		}
	}
	else if (average < 30 && LaneState == LANE_KEEPING)
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	2b1d      	cmp	r3, #29
 800119c:	d825      	bhi.n	80011ea <ADAS_LaneChange+0xce>
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <ADAS_LaneChange+0xe8>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d121      	bne.n	80011ea <ADAS_LaneChange+0xce>
	{

		if(Indication[2] == NO_Object)
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <ADAS_LaneChange+0xec>)
 80011a8:	789b      	ldrb	r3, [r3, #2]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11a      	bne.n	80011e4 <ADAS_LaneChange+0xc8>
		{
			LaneState = LANE_CHANGE_LEFT;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <ADAS_LaneChange+0xe8>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	701a      	strb	r2, [r3, #0]
			HDCMOTOR_voidTurnLeft();
 80011b4:	f000 f846 	bl	8001244 <HDCMOTOR_voidTurnLeft>
			HDCMOTOR_voidForward();
 80011b8:	f000 f828 	bl	800120c <HDCMOTOR_voidForward>
			TIM3_PWM_CH1_Generate(80);
 80011bc:	2050      	movs	r0, #80	; 0x50
 80011be:	f000 fa6f 	bl	80016a0 <TIM3_PWM_CH1_Generate>
			if (rightIRValue2 == IR_LOW && leftIRValue2 == IR_LOW)
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d116      	bne.n	80011f6 <ADAS_LaneChange+0xda>
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d113      	bne.n	80011f6 <ADAS_LaneChange+0xda>
			{
				HDCMOTOR_voidTurnRight();
 80011ce:	f000 f82b 	bl	8001228 <HDCMOTOR_voidTurnRight>
				HDCMOTOR_voidForward();
 80011d2:	f000 f81b 	bl	800120c <HDCMOTOR_voidForward>
				TIM3_PWM_CH1_Generate(60);
 80011d6:	203c      	movs	r0, #60	; 0x3c
 80011d8:	f000 fa62 	bl	80016a0 <TIM3_PWM_CH1_Generate>
				LaneState = LANE_KEEPING;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <ADAS_LaneChange+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
		if(Indication[2] == NO_Object)
 80011e2:	e008      	b.n	80011f6 <ADAS_LaneChange+0xda>
			}
		}
		else
		{
			HDCMOTOR_voidForwardBackwardStop();
 80011e4:	f000 f84a 	bl	800127c <HDCMOTOR_voidForwardBackwardStop>
		if(Indication[2] == NO_Object)
 80011e8:	e005      	b.n	80011f6 <ADAS_LaneChange+0xda>
		}
	}
	else
	{
		LaneState = LANE_KEEPING;
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <ADAS_LaneChange+0xe8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	}
}
 80011f0:	e002      	b.n	80011f8 <ADAS_LaneChange+0xdc>
		if(Indication[1] == NO_Object)
 80011f2:	bf00      	nop
 80011f4:	e000      	b.n	80011f8 <ADAS_LaneChange+0xdc>
		if(Indication[2] == NO_Object)
 80011f6:	bf00      	nop
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000030 	.word	0x20000030
 8001204:	2000003a 	.word	0x2000003a
 8001208:	20000028 	.word	0x20000028

0800120c <HDCMOTOR_voidForward>:

}
/**********************************************************************************************/

void HDCMOTOR_voidForward(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,BACKWARD_PIN,LOW);
 8001210:	2200      	movs	r2, #0
 8001212:	2107      	movs	r1, #7
 8001214:	2001      	movs	r0, #1
 8001216:	f000 fb5d 	bl	80018d4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,FORWARD_PIN,HIGH);
 800121a:	2201      	movs	r2, #1
 800121c:	2106      	movs	r1, #6
 800121e:	2001      	movs	r0, #1
 8001220:	f000 fb58 	bl	80018d4 <MGPIO_enSetPinValue>
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <HDCMOTOR_voidTurnRight>:
/*turn right an left functions*/

/**********************************************************************************************/

void HDCMOTOR_voidTurnRight(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_LEFT_PIN,LOW);
 800122c:	2200      	movs	r2, #0
 800122e:	2107      	movs	r1, #7
 8001230:	2000      	movs	r0, #0
 8001232:	f000 fb4f 	bl	80018d4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_RIGHT_PIN,HIGH);
 8001236:	2201      	movs	r2, #1
 8001238:	2104      	movs	r1, #4
 800123a:	2000      	movs	r0, #0
 800123c:	f000 fb4a 	bl	80018d4 <MGPIO_enSetPinValue>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <HDCMOTOR_voidTurnLeft>:

/**********************************************************************************************/
void HDCMOTOR_voidTurnLeft(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_RIGHT_PIN,LOW);
 8001248:	2200      	movs	r2, #0
 800124a:	2104      	movs	r1, #4
 800124c:	2000      	movs	r0, #0
 800124e:	f000 fb41 	bl	80018d4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_LEFT_PIN,HIGH);
 8001252:	2201      	movs	r2, #1
 8001254:	2107      	movs	r1, #7
 8001256:	2000      	movs	r0, #0
 8001258:	f000 fb3c 	bl	80018d4 <MGPIO_enSetPinValue>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <HDCMOTOR_voidDiretionalStop>:

/* Stop functions */
/**********************************************************************************************/

void HDCMOTOR_voidDiretionalStop(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT ,TURN_RIGHT_PIN ,LOW);
 8001264:	2200      	movs	r2, #0
 8001266:	2104      	movs	r1, #4
 8001268:	2000      	movs	r0, #0
 800126a:	f000 fb33 	bl	80018d4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT ,TURN_LEFT_PIN, LOW);
 800126e:	2200      	movs	r2, #0
 8001270:	2107      	movs	r1, #7
 8001272:	2000      	movs	r0, #0
 8001274:	f000 fb2e 	bl	80018d4 <MGPIO_enSetPinValue>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <HDCMOTOR_voidForwardBackwardStop>:
/**********************************************************************************************/

void HDCMOTOR_voidForwardBackwardStop(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT ,BACKWARD_PIN ,LOW);
 8001280:	2200      	movs	r2, #0
 8001282:	2107      	movs	r1, #7
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fb25 	bl	80018d4 <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT ,FORWARD_PIN, LOW);
 800128a:	2200      	movs	r2, #0
 800128c:	2106      	movs	r1, #6
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fb20 	bl	80018d4 <MGPIO_enSetPinValue>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <IR_IR_PinValueReadLeft>:
    MGPIO_enSetPinDirection(IR1_PORT_NUM, IR1_PIN_NUM, IR1_PIN_MODE);
    MGPIO_enSetPinDirection(IR2_PORT_NUM, IR2_PIN_NUM, IR1_PIN_MODE);
}

IR_PinValue_t IR_IR_PinValueReadLeft(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
	IR_PinValue_t Copy_IRValue=IR_LOW;
 800129e:	2301      	movs	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]
	u8 Copy_u8GetPinVal=Copy_IRValue;
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	71bb      	strb	r3, [r7, #6]
	if(MGPIO_enGetPinValue(IR1_PORT_NUM, IR1_PIN_NUM, &Copy_u8GetPinVal)!=SUCCESS)
 80012a6:	1dbb      	adds	r3, r7, #6
 80012a8:	461a      	mov	r2, r3
 80012aa:	210b      	movs	r1, #11
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 fb95 	bl	80019dc <MGPIO_enGetPinValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d002      	beq.n	80012be <IR_IR_PinValueReadLeft+0x26>
	{
		Copy_IRValue=IR_ERROR;
 80012b8:	2302      	movs	r3, #2
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	e00a      	b.n	80012d4 <IR_IR_PinValueReadLeft+0x3c>
	}
	else
	{
		if(Copy_u8GetPinVal==HIGH)
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <IR_IR_PinValueReadLeft+0x32>
		{
			Copy_IRValue=IR_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	e004      	b.n	80012d4 <IR_IR_PinValueReadLeft+0x3c>
		}
		else if(Copy_u8GetPinVal==LOW)
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <IR_IR_PinValueReadLeft+0x3c>
		{
			Copy_IRValue=IR_LOW;
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
		}
	}
    return Copy_u8GetPinVal;
 80012d4:	79bb      	ldrb	r3, [r7, #6]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <IR_IR_PinValueReadRight>:

IR_PinValue_t IR_IR_PinValueReadRight(void)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
	IR_PinValue_t Copy_IRValue=IR_LOW;
 80012e4:	2301      	movs	r3, #1
 80012e6:	71fb      	strb	r3, [r7, #7]
	u8 Copy_u8GetPinVal=Copy_IRValue;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	71bb      	strb	r3, [r7, #6]
	if(MGPIO_enGetPinValue(IR2_PORT_NUM, IR2_PIN_NUM, &Copy_u8GetPinVal)!=SUCCESS)
 80012ec:	1dbb      	adds	r3, r7, #6
 80012ee:	461a      	mov	r2, r3
 80012f0:	210c      	movs	r1, #12
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 fb72 	bl	80019dc <MGPIO_enGetPinValue>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d002      	beq.n	8001304 <IR_IR_PinValueReadRight+0x26>
	{
		Copy_IRValue=IR_ERROR;
 80012fe:	2302      	movs	r3, #2
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e00a      	b.n	800131a <IR_IR_PinValueReadRight+0x3c>
	}
	else
	{
		if(Copy_u8GetPinVal==HIGH)
 8001304:	79bb      	ldrb	r3, [r7, #6]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d102      	bne.n	8001310 <IR_IR_PinValueReadRight+0x32>
		{
			Copy_IRValue=IR_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	71fb      	strb	r3, [r7, #7]
 800130e:	e004      	b.n	800131a <IR_IR_PinValueReadRight+0x3c>
		}
		else if(Copy_u8GetPinVal==LOW)
 8001310:	79bb      	ldrb	r3, [r7, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <IR_IR_PinValueReadRight+0x3c>
		{
			Copy_IRValue=IR_LOW;
 8001316:	2301      	movs	r3, #1
 8001318:	71fb      	strb	r3, [r7, #7]
		}
	}
    return Copy_IRValue;
 800131a:	79fb      	ldrb	r3, [r7, #7]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <RPLIDAR_voidScanResponse>:

/*               ***Start Scan***
 * -->In this function, you must determine the angle you want, and it will return the distance for you
 * */
void RPLIDAR_voidScanResponse(float angle1, float angle2)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	u8 Copy_uint8Quality=0,Copy_uint8AngleH=0,Copy_uint8AngleL=0,Copy_uint8DistanceH=0,Copy_uint8DistanceL=0;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	2300      	movs	r3, #0
 8001334:	73bb      	strb	r3, [r7, #14]
 8001336:	2300      	movs	r3, #0
 8001338:	737b      	strb	r3, [r7, #13]
 800133a:	2300      	movs	r3, #0
 800133c:	733b      	strb	r3, [r7, #12]
 800133e:	2300      	movs	r3, #0
 8001340:	72fb      	strb	r3, [r7, #11]
	if(flag_s==OK)
 8001342:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <RPLIDAR_voidScanResponse+0x18c>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f040 80ad 	bne.w	80014a6 <RPLIDAR_voidScanResponse+0x182>
	{
		while(1)
		{
			Copy_uint8Quality=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 800134c:	2001      	movs	r0, #1
 800134e:	f000 fc51 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
			while(Copy_uint8Quality!=0X3E)
 8001356:	e004      	b.n	8001362 <RPLIDAR_voidScanResponse+0x3e>
			{
				Copy_uint8Quality=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 fc4b 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
			while(Copy_uint8Quality!=0X3E)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b3e      	cmp	r3, #62	; 0x3e
 8001366:	d1f7      	bne.n	8001358 <RPLIDAR_voidScanResponse+0x34>
			}
			Copy_uint8AngleL=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 8001368:	2001      	movs	r0, #1
 800136a:	f000 fc43 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 800136e:	4603      	mov	r3, r0
 8001370:	737b      	strb	r3, [r7, #13]
			Copy_uint8AngleH=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 8001372:	2001      	movs	r0, #1
 8001374:	f000 fc3e 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 8001378:	4603      	mov	r3, r0
 800137a:	73bb      	strb	r3, [r7, #14]
			Copy_uint8DistanceL=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 800137c:	2001      	movs	r0, #1
 800137e:	f000 fc39 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 8001382:	4603      	mov	r3, r0
 8001384:	72fb      	strb	r3, [r7, #11]
			Copy_uint8DistanceH=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 8001386:	2001      	movs	r0, #1
 8001388:	f000 fc34 	bl	8001bf4 <MUSART_enBusyReceiveByte>
 800138c:	4603      	mov	r3, r0
 800138e:	733b      	strb	r3, [r7, #12]
			if((Copy_uint8Quality== 0x3E && (Copy_uint8DistanceL!=0x00 && Copy_uint8DistanceH!=0x00)))
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b3e      	cmp	r3, #62	; 0x3e
 8001394:	d1da      	bne.n	800134c <RPLIDAR_voidScanResponse+0x28>
 8001396:	7afb      	ldrb	r3, [r7, #11]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0d7      	beq.n	800134c <RPLIDAR_voidScanResponse+0x28>
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0d4      	beq.n	800134c <RPLIDAR_voidScanResponse+0x28>
			{
				if((Copy_uint8Quality== 0x3E) && ((Copy_uint8DistanceH!=0x3E)|| (Copy_uint8DistanceL!=0x3E) || (Copy_uint8AngleH!=0x3E) || (Copy_uint8AngleL!=0x3E)))
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b3e      	cmp	r3, #62	; 0x3e
 80013a6:	d1d1      	bne.n	800134c <RPLIDAR_voidScanResponse+0x28>
 80013a8:	7b3b      	ldrb	r3, [r7, #12]
 80013aa:	2b3e      	cmp	r3, #62	; 0x3e
 80013ac:	d108      	bne.n	80013c0 <RPLIDAR_voidScanResponse+0x9c>
 80013ae:	7afb      	ldrb	r3, [r7, #11]
 80013b0:	2b3e      	cmp	r3, #62	; 0x3e
 80013b2:	d105      	bne.n	80013c0 <RPLIDAR_voidScanResponse+0x9c>
 80013b4:	7bbb      	ldrb	r3, [r7, #14]
 80013b6:	2b3e      	cmp	r3, #62	; 0x3e
 80013b8:	d102      	bne.n	80013c0 <RPLIDAR_voidScanResponse+0x9c>
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	2b3e      	cmp	r3, #62	; 0x3e
 80013be:	d0c5      	beq.n	800134c <RPLIDAR_voidScanResponse+0x28>
				{
					Copy_floatAngle=(float)((((u16)Copy_uint8AngleH<<7)|(Copy_uint8AngleL>>1))/64.0);
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	01db      	lsls	r3, r3, #7
 80013c4:	7b7a      	ldrb	r2, [r7, #13]
 80013c6:	0852      	lsrs	r2, r2, #1
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	4313      	orrs	r3, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f821 	bl	8000414 <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <RPLIDAR_voidScanResponse+0x190>)
 80013d8:	f7ff f9b0 	bl	800073c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fab2 	bl	800094c <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 80013ec:	6013      	str	r3, [r2, #0]
					Copy_floatDistance=(float)((((u16)Copy_uint8DistanceH<<8)|(Copy_uint8DistanceL))/4.0);
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	021a      	lsls	r2, r3, #8
 80013f2:	7afb      	ldrb	r3, [r7, #11]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f80c 	bl	8000414 <__aeabi_i2d>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <RPLIDAR_voidScanResponse+0x198>)
 8001402:	f7ff f99b 	bl	800073c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff fa9d 	bl	800094c <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	4a2a      	ldr	r2, [pc, #168]	; (80014c0 <RPLIDAR_voidScanResponse+0x19c>)
 8001416:	6013      	str	r3, [r2, #0]
					if(angle1 >= 0 && angle2<=45)
 8001418:	f04f 0100 	mov.w	r1, #0
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fda5 	bl	8000f6c <__aeabi_fcmpge>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d02a      	beq.n	800147e <RPLIDAR_voidScanResponse+0x15a>
 8001428:	4926      	ldr	r1, [pc, #152]	; (80014c4 <RPLIDAR_voidScanResponse+0x1a0>)
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f7ff fd94 	bl	8000f58 <__aeabi_fcmple>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d023      	beq.n	800147e <RPLIDAR_voidScanResponse+0x15a>
					{
						if((Copy_floatAngle >= angle1 && Copy_floatAngle <= angle2) || (Copy_floatAngle >= 315.0 && Copy_floatAngle < 360.0))
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff fd8b 	bl	8000f58 <__aeabi_fcmple>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <RPLIDAR_voidScanResponse+0x136>
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff fd8c 	bl	8000f6c <__aeabi_fcmpge>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d125      	bne.n	80014a6 <RPLIDAR_voidScanResponse+0x182>
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	491a      	ldr	r1, [pc, #104]	; (80014c8 <RPLIDAR_voidScanResponse+0x1a4>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fd83 	bl	8000f6c <__aeabi_fcmpge>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d008      	beq.n	800147e <RPLIDAR_voidScanResponse+0x15a>
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4916      	ldr	r1, [pc, #88]	; (80014cc <RPLIDAR_voidScanResponse+0x1a8>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd66 	bl	8000f44 <__aeabi_fcmplt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d113      	bne.n	80014a6 <RPLIDAR_voidScanResponse+0x182>
						{
							//DIO_WritePin(PINA0,HIGH);
							break;
						}
					}
					if((Copy_floatAngle >= angle1 && Copy_floatAngle <= angle2))
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff fd67 	bl	8000f58 <__aeabi_fcmple>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d008      	beq.n	80014a2 <RPLIDAR_voidScanResponse+0x17e>
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <RPLIDAR_voidScanResponse+0x194>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	6838      	ldr	r0, [r7, #0]
 8001498:	f7ff fd68 	bl	8000f6c <__aeabi_fcmpge>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d100      	bne.n	80014a4 <RPLIDAR_voidScanResponse+0x180>
			Copy_uint8Quality=MUSART_enBusyReceiveByte(RPLIDAR_UART);
 80014a2:	e753      	b.n	800134c <RPLIDAR_voidScanResponse+0x28>
					{
						break;
 80014a4:	bf00      	nop
			}
			
		}
		
	}
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000044 	.word	0x20000044
 80014b4:	40500000 	.word	0x40500000
 80014b8:	2000003c 	.word	0x2000003c
 80014bc:	40100000 	.word	0x40100000
 80014c0:	20000040 	.word	0x20000040
 80014c4:	42340000 	.word	0x42340000
 80014c8:	439d8000 	.word	0x439d8000
 80014cc:	43b40000 	.word	0x43b40000

080014d0 <RPLIDAR_GetDistanceValue>:
/*The aim of the function getter is to return a global variable
 * return the distance value by mm
 * */

float RPLIDAR_GetDistanceValue(float angle1, float angle2)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	RPLIDAR_voidScanResponse(angle1,angle2);
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff21 	bl	8001324 <RPLIDAR_voidScanResponse>
	return Copy_floatDistance;
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <RPLIDAR_GetDistanceValue+0x20>)
 80014e4:	681b      	ldr	r3, [r3, #0]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000040 	.word	0x20000040

080014f4 <HULTRASONIC_enGetRead>:
	return local_state;
}


ErrorState_t HULTRASONIC_enGetRead(u16* copy_u16distance)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	ErrorState_t local_state = SUCCESS;
 80014fc:	2302      	movs	r3, #2
 80014fe:	77fb      	strb	r3, [r7, #31]
	if (copy_u16distance != NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d060      	beq.n	80015c8 <HULTRASONIC_enGetRead+0xd4>
	{
		u16 Reading_1 = 0, Reading_2 = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	81fb      	strh	r3, [r7, #14]
 800150a:	2300      	movs	r3, #0
 800150c:	81bb      	strh	r3, [r7, #12]
		u32 TimeTicks;

		MGPIO_enSetPinValue(HULTRASONIC_TRIG_PORT, HULTRASONIC_TRIG_PIN, HIGH);
 800150e:	2201      	movs	r2, #1
 8001510:	2100      	movs	r1, #0
 8001512:	2001      	movs	r0, #1
 8001514:	f000 f9de 	bl	80018d4 <MGPIO_enSetPinValue>
		MSYSTICK_enSetBusyWait(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f000 faa7 	bl	8001a6c <MSYSTICK_enSetBusyWait>
		MGPIO_enSetPinValue(HULTRASONIC_TRIG_PORT, HULTRASONIC_TRIG_PIN, LOW);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2001      	movs	r0, #1
 8001524:	f000 f9d6 	bl	80018d4 <MGPIO_enSetPinValue>

		while(MTIM1_ICU_BSY);
 8001528:	bf00      	nop
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HULTRASONIC_enGetRead+0xe4>)
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f8      	beq.n	800152a <HULTRASONIC_enGetRead+0x36>
		MTIMER1_ICU_enRead(&Reading_1);
 8001538:	f107 030e 	add.w	r3, r7, #14
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fb19 	bl	8001b74 <MTIMER1_ICU_enRead>
		MTIMER1_enStart();
 8001542:	f000 faf7 	bl	8001b34 <MTIMER1_enStart>
		MTIMER1_ICU_enSetTrigger(MTIM1_FAILING_TRIG);
 8001546:	2001      	movs	r0, #1
 8001548:	f000 fb26 	bl	8001b98 <MTIMER1_ICU_enSetTrigger>

		while(MTIM1_ICU_BSY);
 800154c:	bf00      	nop
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <HULTRASONIC_enGetRead+0xe4>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	085b      	lsrs	r3, r3, #1
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f8      	beq.n	800154e <HULTRASONIC_enGetRead+0x5a>
		MTIMER1_ICU_enRead(&Reading_2);
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fb07 	bl	8001b74 <MTIMER1_ICU_enRead>
		MTIMER1_ICU_enSetTrigger(MTIM1_RISING_TRIG);
 8001566:	2000      	movs	r0, #0
 8001568:	f000 fb16 	bl	8001b98 <MTIMER1_ICU_enSetTrigger>
		MTIMER1_enStop();
 800156c:	f000 faf2 	bl	8001b54 <MTIMER1_enStop>
		MTIMER1_enReset();
 8001570:	f000 fad4 	bl	8001b1c <MTIMER1_enReset>

		TimeTicks = (u32)Reading_2 - (u32)Reading_1;
 8001574:	89bb      	ldrh	r3, [r7, #12]
 8001576:	461a      	mov	r2, r3
 8001578:	89fb      	ldrh	r3, [r7, #14]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	61bb      	str	r3, [r7, #24]


		f32 TickTime = MTIM1_PRESCALER / F_CPU;
 800157e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001582:	617b      	str	r3, [r7, #20]
		f32 time  = (TimeTicks *TickTime)/1000000.0;
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f7ff fae7 	bl	8000b58 <__aeabi_ui2f>
 800158a:	4603      	mov	r3, r0
 800158c:	6979      	ldr	r1, [r7, #20]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fb3a 	bl	8000c08 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <HULTRASONIC_enGetRead+0xe8>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fbe9 	bl	8000d70 <__aeabi_fdiv>
 800159e:	4603      	mov	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]
		*copy_u16distance = (SPEED_OF_SOUND * (time/2));
 80015a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015a6:	6938      	ldr	r0, [r7, #16]
 80015a8:	f7ff fbe2 	bl	8000d70 <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <HULTRASONIC_enGetRead+0xec>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fb29 	bl	8000c08 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fceb 	bl	8000f94 <__aeabi_f2uiz>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e001      	b.n	80015cc <HULTRASONIC_enGetRead+0xd8>

	}
	else
	{
		local_state = NULL_PTR_ERR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	77fb      	strb	r3, [r7, #31]
	}
	return local_state;
 80015cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40012c00 	.word	0x40012c00
 80015dc:	49742400 	.word	0x49742400
 80015e0:	4705fc00 	.word	0x4705fc00

080015e4 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 80015e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00e      	beq.n	8001614 <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 80015f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001600:	f023 0302 	bic.w	r3, r3, #2
 8001604:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 8001606:	4b25      	ldr	r3, [pc, #148]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 8001614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00e      	beq.n	8001640 <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 8001622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	f023 0304 	bic.w	r3, r3, #4
 8001630:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <TIM2_IRQHandler+0xb8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 8001640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00e      	beq.n	800166c <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 800164e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001658:	f023 0308 	bic.w	r3, r3, #8
 800165c:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 800166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00e      	beq.n	8001698 <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 800167a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001684:	f023 0310 	bic.w	r3, r3, #16
 8001688:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <TIM2_IRQHandler+0xb8>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 8001692:	4b02      	ldr	r3, [pc, #8]	; (800169c <TIM2_IRQHandler+0xb8>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4798      	blx	r3
		}
	}
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000048 	.word	0x20000048

080016a0 <TIM3_PWM_CH1_Generate>:



/*the used tim 3 PWM generation func */
void TIM3_PWM_CH1_Generate(u8 copy_u8Duty)
{	// Configure PWM mode for Channel 1
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; 		// PWM mode 1
 80016aa:	4b26      	ldr	r3, [pc, #152]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a25      	ldr	r2, [pc, #148]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016b0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80016b4:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; 	// Preload enable
 80016b6:	4b23      	ldr	r3, [pc, #140]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6193      	str	r3, [r2, #24]
	TIM3->CCER  |= TIM_CCER_CC1E;   		// Enable the output for Channel 1
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6213      	str	r3, [r2, #32]
	// Set the PWM period and duty cycle

	copy_u8Duty = 100 - copy_u8Duty;
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80016d4:	71fb      	strb	r3, [r7, #7]

	TIM3->PSC = 0;             						 // No prescaler
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = TIM3_MAX_NUM_OF_TICKS_CH1;           // Period (1 kHz PWM frequency)
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = (u16)(((copy_u8Duty/100.0)*(TIM3_MAX_NUM_OF_TICKS_CH1-1))+1);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe fe94 	bl	8000414 <__aeabi_i2d>
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <TIM3_PWM_CH1_Generate+0xa8>)
 80016f2:	f7ff f823 	bl	800073c <__aeabi_ddiv>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <TIM3_PWM_CH1_Generate+0xac>)
 8001704:	f7fe fef0 	bl	80004e8 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <TIM3_PWM_CH1_Generate+0xb0>)
 8001716:	f7fe fd31 	bl	800017c <__adddf3>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f8f3 	bl	800090c <__aeabi_d2uiz>
 8001726:	4603      	mov	r3, r0
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <TIM3_PWM_CH1_Generate+0xa4>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40000400 	.word	0x40000400
 8001748:	40590000 	.word	0x40590000
 800174c:	408f3000 	.word	0x408f3000
 8001750:	3ff00000 	.word	0x3ff00000

08001754 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <ADC1_2_IRQHandler+0x24>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <ADC1_2_IRQHandler+0x28>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 800176c:	4b02      	ldr	r3, [pc, #8]	; (8001778 <ADC1_2_IRQHandler+0x24>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4798      	blx	r3
	}
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000088 	.word	0x20000088
 800177c:	40012400 	.word	0x40012400

08001780 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <EXTI0_IRQHandler+0x18>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <EXTI0_IRQHandler+0x18>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4798      	blx	r3
	}
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000008c 	.word	0x2000008c

0800179c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <EXTI1_IRQHandler+0x18>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <EXTI1_IRQHandler+0x18>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	4798      	blx	r3
	}

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000008c 	.word	0x2000008c

080017b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <EXTI2_IRQHandler+0x18>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 80017c4:	4b02      	ldr	r3, [pc, #8]	; (80017d0 <EXTI2_IRQHandler+0x18>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4798      	blx	r3
	}
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	2000008c 	.word	0x2000008c

080017d4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <EXTI3_IRQHandler+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <EXTI3_IRQHandler+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4798      	blx	r3
	}
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000008c 	.word	0x2000008c

080017f0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <EXTI4_IRQHandler+0x18>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 80017fc:	4b02      	ldr	r3, [pc, #8]	; (8001808 <EXTI4_IRQHandler+0x18>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4798      	blx	r3
	}
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000008c 	.word	0x2000008c

0800180c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 800181e:	e01e      	b.n	800185e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8001828:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4798      	blx	r3
}
 800182e:	e016      	b.n	800185e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8001838:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	4798      	blx	r3
}
 800183e:	e00e      	b.n	800185e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 800184a:	6a1b      	ldr	r3, [r3, #32]
 800184c:	4798      	blx	r3
}
 800184e:	e006      	b.n	800185e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <EXTI9_5_IRQHandler+0x58>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	4798      	blx	r3
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000008c 	.word	0x2000008c

08001868 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 800187a:	e026      	b.n	80018ca <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	4798      	blx	r3
}
 800188a:	e01e      	b.n	80018ca <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	4798      	blx	r3
}
 800189a:	e016      	b.n	80018ca <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	4798      	blx	r3
}
 80018aa:	e00e      	b.n	80018ca <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 80018ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	4798      	blx	r3
}
 80018ba:	e006      	b.n	80018ca <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <EXTI15_10_IRQHandler+0x68>)
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	4798      	blx	r3
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000008c 	.word	0x2000008c

080018d4 <MGPIO_enSetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t copy_u8Value)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	460b      	mov	r3, r1
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	4613      	mov	r3, r2
 80018e4:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 80018e6:	2302      	movs	r3, #2
 80018e8:	73fb      	strb	r3, [r7, #15]
	/*	@beief 		This APIs use to set the GPIO PIN
	 *  choose between High and Low Value state and set it in ODR
	 * */
	switch(copy_u8port)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d046      	beq.n	800197e <MGPIO_enSetPinValue+0xaa>
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	dc64      	bgt.n	80019be <MGPIO_enSetPinValue+0xea>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <MGPIO_enSetPinValue+0x2a>
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d020      	beq.n	800193e <MGPIO_enSetPinValue+0x6a>
 80018fc:	e05f      	b.n	80019be <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 80018fe:	797b      	ldrb	r3, [r7, #5]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d10a      	bne.n	800191a <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MGPIO_enSetPinValue+0xfc>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	79ba      	ldrb	r2, [r7, #6]
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4611      	mov	r1, r2
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <MGPIO_enSetPinValue+0xfc>)
 8001914:	430b      	orrs	r3, r1
 8001916:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8001918:	e054      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800191a:	797b      	ldrb	r3, [r7, #5]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10b      	bne.n	8001938 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MGPIO_enSetPinValue+0xfc>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	43d2      	mvns	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <MGPIO_enSetPinValue+0xfc>)
 8001932:	400b      	ands	r3, r1
 8001934:	60d3      	str	r3, [r2, #12]
		break;
 8001936:	e045      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
		break;
 800193c:	e042      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 800193e:	797b      	ldrb	r3, [r7, #5]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10a      	bne.n	800195a <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MGPIO_enSetPinValue+0x100>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	79ba      	ldrb	r2, [r7, #6]
 800194a:	2101      	movs	r1, #1
 800194c:	fa01 f202 	lsl.w	r2, r1, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <MGPIO_enSetPinValue+0x100>)
 8001954:	430b      	orrs	r3, r1
 8001956:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 8001958:	e034      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800195a:	797b      	ldrb	r3, [r7, #5]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d10b      	bne.n	8001978 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <MGPIO_enSetPinValue+0x100>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	79ba      	ldrb	r2, [r7, #6]
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	43d2      	mvns	r2, r2
 800196e:	4611      	mov	r1, r2
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MGPIO_enSetPinValue+0x100>)
 8001972:	400b      	ands	r3, r1
 8001974:	60d3      	str	r3, [r2, #12]
		break;
 8001976:	e025      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
		break;
 800197c:	e022      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10a      	bne.n	800199a <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <MGPIO_enSetPinValue+0x104>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	79ba      	ldrb	r2, [r7, #6]
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	4611      	mov	r1, r2
 8001992:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <MGPIO_enSetPinValue+0x104>)
 8001994:	430b      	orrs	r3, r1
 8001996:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8001998:	e014      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10b      	bne.n	80019b8 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <MGPIO_enSetPinValue+0x104>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	79ba      	ldrb	r2, [r7, #6]
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	43d2      	mvns	r2, r2
 80019ae:	4611      	mov	r1, r2
 80019b0:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <MGPIO_enSetPinValue+0x104>)
 80019b2:	400b      	ands	r3, r1
 80019b4:	60d3      	str	r3, [r2, #12]
		break;
 80019b6:	e005      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
		break;
 80019bc:	e002      	b.n	80019c4 <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 80019be:	2300      	movs	r3, #0
 80019c0:	73fb      	strb	r3, [r7, #15]
		break;
 80019c2:	bf00      	nop
	}
	return local_state;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	40010800 	.word	0x40010800
 80019d4:	40010c00 	.word	0x40010c00
 80019d8:	40011000 	.word	0x40011000

080019dc <MGPIO_enGetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enGetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t *pinValue)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	603a      	str	r2, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	460b      	mov	r3, r1
 80019ea:	71bb      	strb	r3, [r7, #6]
	ErrorState_t local_state = SUCCESS;
 80019ec:	2302      	movs	r3, #2
 80019ee:	73fb      	strb	r3, [r7, #15]

	/*	@beief This APIs use to get the GPIO PIN Value
	 *  GET_BIT will get the ODR register Pin value and returned by Reference
	 * */

	switch(copy_u8port)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d01e      	beq.n	8001a34 <MGPIO_enGetPinValue+0x58>
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	dc28      	bgt.n	8001a4c <MGPIO_enGetPinValue+0x70>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <MGPIO_enGetPinValue+0x28>
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d00c      	beq.n	8001a1c <MGPIO_enGetPinValue+0x40>
 8001a02:	e023      	b.n	8001a4c <MGPIO_enGetPinValue+0x70>
	{
	case PORTA:
		*pinValue = GET_BIT(GPIOA->GPIO_IDR, copy_u8pin);
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MGPIO_enGetPinValue+0x84>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	701a      	strb	r2, [r3, #0]
		break;
 8001a1a:	e01a      	b.n	8001a52 <MGPIO_enGetPinValue+0x76>

	case PORTB:
		*pinValue = GET_BIT(GPIOB->GPIO_IDR, copy_u8pin);
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MGPIO_enGetPinValue+0x88>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	fa22 f303 	lsr.w	r3, r2, r3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	701a      	strb	r2, [r3, #0]
		break;
 8001a32:	e00e      	b.n	8001a52 <MGPIO_enGetPinValue+0x76>

	case PORTC:
		*pinValue = GET_BIT(GPIOC->GPIO_IDR, copy_u8pin);
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MGPIO_enGetPinValue+0x8c>)
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	701a      	strb	r2, [r3, #0]
		break;
 8001a4a:	e002      	b.n	8001a52 <MGPIO_enGetPinValue+0x76>
	default:
		local_state =  OUT_OF_RANG_ERR;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	73fb      	strb	r3, [r7, #15]
		break;
 8001a50:	bf00      	nop
	}

	return local_state;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40010800 	.word	0x40010800
 8001a64:	40010c00 	.word	0x40010c00
 8001a68:	40011000 	.word	0x40011000

08001a6c <MSYSTICK_enSetBusyWait>:
 * \Parameters (in) : Copy_u32NumberOfTicks
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 *******************************************************************************/
ErrorState_t MSYSTICK_enSetBusyWait(u32 Copy_u32NumberOfTicks)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	 * 1. load the no.of tick into the load register
	 * 2. enable the systick
	 * 3. wait of the count flag if set, then register is zero
	 * 4. disable the systick
	 * 5. clear the value register to be reuse again */
	STK->STK_LOAD = Copy_u32NumberOfTicks;
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6053      	str	r3, [r2, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a0d      	ldr	r2, [pc, #52]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL,COUNTFLAG)));
 8001a86:	bf00      	nop
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f8      	beq.n	8001a88 <MSYSTICK_enSetBusyWait+0x1c>
	CLR_BIT(STK->STK_CTRL, ENABLE);
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a06      	ldr	r2, [pc, #24]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]

	STK->STK_VAL = MSYSTICK_REG_CLEAR;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <MSYSTICK_enSetBusyWait+0x48>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 8001aa8:	2302      	movs	r3, #2
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e010 	.word	0xe000e010

08001ab8 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <SysTick_Handler+0x54>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <SysTick_Handler+0x58>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d10e      	bne.n	8001ae8 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <SysTick_Handler+0x5c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <SysTick_Handler+0x5c>)
 8001ad0:	f023 0302 	bic.w	r3, r3, #2
 8001ad4:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <SysTick_Handler+0x5c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <SysTick_Handler+0x5c>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <SysTick_Handler+0x5c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <SysTick_Handler+0x60>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <SysTick_Handler+0x60>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <SysTick_Handler+0x5c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <SysTick_Handler+0x54>)
 8001b06:	701a      	strb	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200000db 	.word	0x200000db
 8001b10:	200000d0 	.word	0x200000d0
 8001b14:	e000e010 	.word	0xe000e010
 8001b18:	200000cc 	.word	0x200000cc

08001b1c <MTIMER1_enReset>:
	TIM1->TIM1_PSC = copy_u16prescaler - 1;
	return SUCCESS;
}

ErrorState_t MTIMER1_enReset(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0

	TIM1->TIM1_CNT = 0x00;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <MTIMER1_enReset+0x14>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
	return SUCCESS;
 8001b26:	2302      	movs	r3, #2
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	40012c00 	.word	0x40012c00

08001b34 <MTIMER1_enStart>:

ErrorState_t MTIMER1_enStart(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	SET_BIT(TIM1->TIM1_CR1,0);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <MTIMER1_enStart+0x1c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <MTIMER1_enStart+0x1c>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6013      	str	r3, [r2, #0]
	return SUCCESS;
 8001b44:	2302      	movs	r3, #2
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40012c00 	.word	0x40012c00

08001b54 <MTIMER1_enStop>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MTIMER1_enStop(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
	CLR_BIT(TIM1->TIM1_CR1, 0);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <MTIMER1_enStop+0x1c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <MTIMER1_enStop+0x1c>)
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	6013      	str	r3, [r2, #0]

	return SUCCESS;
 8001b64:	2302      	movs	r3, #2
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MTIMER1_ICU_enRead>:
	ICU_callback = ptrfn;
	return SUCCESS;

}
ErrorState_t MTIMER1_ICU_enRead(volatile u16 *ptrReadValue)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	*ptrReadValue = TIM1->TIM1_CCR1;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <MTIMER1_ICU_enRead+0x20>)
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	801a      	strh	r2, [r3, #0]
	return SUCCESS;
 8001b86:	2302      	movs	r3, #2
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00

08001b98 <MTIMER1_ICU_enSetTrigger>:
ErrorState_t MTIMER1_ICU_enSetTrigger(u8 copy_u8Trigg)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	if (copy_u8Trigg == MTIM1_RISING_TRIG)
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d106      	bne.n	8001bb6 <MTIMER1_ICU_enSetTrigger+0x1e>
	{
		CLR_BIT(TIM1->TIM1_CCER,1);   /* trigger is rising by default */
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <MTIMER1_ICU_enSetTrigger+0x3c>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <MTIMER1_ICU_enSetTrigger+0x3c>)
 8001bae:	f023 0302 	bic.w	r3, r3, #2
 8001bb2:	6213      	str	r3, [r2, #32]
 8001bb4:	e008      	b.n	8001bc8 <MTIMER1_ICU_enSetTrigger+0x30>

	}
	else if (copy_u8Trigg == MTIM1_FAILING_TRIG)
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <MTIMER1_ICU_enSetTrigger+0x30>
	{
		SET_BIT(TIM1->TIM1_CCER,1);   /* trigger is FALING by default */
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <MTIMER1_ICU_enSetTrigger+0x3c>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <MTIMER1_ICU_enSetTrigger+0x3c>)
 8001bc2:	f043 0302 	orr.w	r3, r3, #2
 8001bc6:	6213      	str	r3, [r2, #32]
	}
	else
	{
		//DO NOTHING
	}
	return SUCCESS;
 8001bc8:	2302      	movs	r3, #2
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40012c00 	.word	0x40012c00

08001bd8 <TIM1_CC_IRQHandler>:

void TIM1_CC_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <TIM1_CC_IRQHandler+0x18>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <TIM1_CC_IRQHandler+0x18>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4798      	blx	r3
	}

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200000d4 	.word	0x200000d4

08001bf4 <MUSART_enBusyReceiveByte>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 									-> OUT_OF_RANG_ERR
 * 									-> NULL_PTR_ERR
 *******************************************************************************/
u8 MUSART_enBusyReceiveByte(MUSART_t copy_u8USARTnum)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	 *	1. waiting of RX Not Empty Flag to be set
	 *	2. get the Data from Data Register AND with 1Byte
	 * 	3. Assign the value into the ptr_u8Data to be returned as ptr
	 * 	4. the flag is cleared by reading the Data from the register		*/
	u8 local_u8byte;
	if (copy_u8USARTnum <= MUSART3)
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d810      	bhi.n	8001c26 <MUSART_enBusyReceiveByte+0x32>
	{
		while (!(GET_BIT(USART_CH[copy_u8USARTnum]->USART_SR, RXNE)));
 8001c04:	bf00      	nop
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <MUSART_enBusyReceiveByte+0x40>)
 8001c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	095b      	lsrs	r3, r3, #5
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f5      	beq.n	8001c06 <MUSART_enBusyReceiveByte+0x12>
		local_u8byte = USART_CH[copy_u8USARTnum]->USART_DR & MUSART_1BYTE;
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <MUSART_enBusyReceiveByte+0x40>)
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	73fb      	strb	r3, [r7, #15]
	else
	{

	}

	return local_u8byte;
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <USART1_IRQHandler+0x98>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	09db      	lsrs	r3, r3, #7
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d018      	beq.n	8001c7e <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <USART1_IRQHandler+0x9c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <USART1_IRQHandler+0x9c>)
 8001c56:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <USART1_IRQHandler+0x9c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <USART1_IRQHandler+0xa0>)
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d103      	bne.n	8001c6e <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <USART1_IRQHandler+0x9c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e007      	b.n	8001c7e <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <USART1_IRQHandler+0x9c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <USART1_IRQHandler+0xa0>)
 8001c76:	5c9a      	ldrb	r2, [r3, r2]
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <USART1_IRQHandler+0x98>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <USART1_IRQHandler+0x98>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01c      	beq.n	8001cc8 <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8001c8e:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <USART1_IRQHandler+0x98>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <USART1_IRQHandler+0xa4>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	b2c9      	uxtb	r1, r1
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <USART1_IRQHandler+0xa8>)
 8001c9e:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <USART1_IRQHandler+0xa4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <USART1_IRQHandler+0xa8>)
 8001ca8:	5c9b      	ldrb	r3, [r3, r2]
 8001caa:	2b23      	cmp	r3, #35	; 0x23
 8001cac:	d106      	bne.n	8001cbc <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <USART1_IRQHandler+0xa4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <USART1_IRQHandler+0xac>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001cba:	e005      	b.n	8001cc8 <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <USART1_IRQHandler+0xa4>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <USART1_IRQHandler+0xa4>)
 8001cc6:	701a      	strb	r2, [r3, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	200000d9 	.word	0x200000d9
 8001cd8:	200000f8 	.word	0x200000f8
 8001cdc:	200000da 	.word	0x200000da
 8001ce0:	200000dc 	.word	0x200000dc
 8001ce4:	200000d8 	.word	0x200000d8

08001ce8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 8001cec:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <USART2_IRQHandler+0x98>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	09db      	lsrs	r3, r3, #7
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d018      	beq.n	8001d2e <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <USART2_IRQHandler+0x9c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3301      	adds	r3, #1
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <USART2_IRQHandler+0x9c>)
 8001d06:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <USART2_IRQHandler+0x9c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <USART2_IRQHandler+0xa0>)
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <USART2_IRQHandler+0x9c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e007      	b.n	8001d2e <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <USART2_IRQHandler+0x9c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <USART2_IRQHandler+0xa0>)
 8001d26:	5c9a      	ldrb	r2, [r3, r2]
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <USART2_IRQHandler+0x98>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <USART2_IRQHandler+0x98>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	095b      	lsrs	r3, r3, #5
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01c      	beq.n	8001d78 <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <USART2_IRQHandler+0x98>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <USART2_IRQHandler+0xa4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	b2c9      	uxtb	r1, r1
 8001d4c:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <USART2_IRQHandler+0xa8>)
 8001d4e:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <USART2_IRQHandler+0xa4>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <USART2_IRQHandler+0xa8>)
 8001d58:	5c9b      	ldrb	r3, [r3, r2]
 8001d5a:	2b23      	cmp	r3, #35	; 0x23
 8001d5c:	d106      	bne.n	8001d6c <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <USART2_IRQHandler+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <USART2_IRQHandler+0xac>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001d6a:	e005      	b.n	8001d78 <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <USART2_IRQHandler+0xa4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <USART2_IRQHandler+0xa4>)
 8001d76:	701a      	strb	r2, [r3, #0]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000000 	.word	0x20000000
 8001d84:	200000d9 	.word	0x200000d9
 8001d88:	200000f8 	.word	0x200000f8
 8001d8c:	200000da 	.word	0x200000da
 8001d90:	200000dc 	.word	0x200000dc
 8001d94:	200000d8 	.word	0x200000d8

08001d98 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <USART3_IRQHandler+0x98>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	09db      	lsrs	r3, r3, #7
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <USART3_IRQHandler+0x9c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	3301      	adds	r3, #1
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <USART3_IRQHandler+0x9c>)
 8001db6:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <USART3_IRQHandler+0x9c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <USART3_IRQHandler+0xa0>)
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d103      	bne.n	8001dce <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <USART3_IRQHandler+0x9c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
 8001dcc:	e007      	b.n	8001dde <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <USART3_IRQHandler+0x9c>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <USART3_IRQHandler+0xa0>)
 8001dd6:	5c9a      	ldrb	r2, [r3, r2]
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <USART3_IRQHandler+0x98>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <USART3_IRQHandler+0x98>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01c      	beq.n	8001e28 <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <USART3_IRQHandler+0x98>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <USART3_IRQHandler+0xa4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	b2c9      	uxtb	r1, r1
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <USART3_IRQHandler+0xa8>)
 8001dfe:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <USART3_IRQHandler+0xa4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <USART3_IRQHandler+0xa8>)
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	2b23      	cmp	r3, #35	; 0x23
 8001e0c:	d106      	bne.n	8001e1c <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <USART3_IRQHandler+0xa4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <USART3_IRQHandler+0xac>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001e1a:	e005      	b.n	8001e28 <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <USART3_IRQHandler+0xa4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <USART3_IRQHandler+0xa4>)
 8001e26:	701a      	strb	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr
 8001e30:	20000000 	.word	0x20000000
 8001e34:	200000d9 	.word	0x200000d9
 8001e38:	200000f8 	.word	0x200000f8
 8001e3c:	200000da 	.word	0x200000da
 8001e40:	200000dc 	.word	0x200000dc
 8001e44:	200000d8 	.word	0x200000d8

08001e48 <main>:


void ADAS_Init(void);

int main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	ADAS_Distance_Manager();
 8001e4c:	f7ff f8c2 	bl	8000fd4 <ADAS_Distance_Manager>
	ADAS_laneKeeping();
 8001e50:	f7ff f90a 	bl	8001068 <ADAS_laneKeeping>
	ADAS_LaneChange();
 8001e54:	f7ff f962 	bl	800111c <ADAS_LaneChange>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e62:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e64:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e8e:	f000 f811 	bl	8001eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e92:	f7ff ffd9 	bl	8001e48 <main>

08001e96 <LoopForever>:

LoopForever:
    b LoopForever
 8001e96:	e7fe      	b.n	8001e96 <LoopForever>
  ldr   r0, =_estack
 8001e98:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ea4:	08001f1c 	.word	0x08001f1c
  ldr r2, =_sbss
 8001ea8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001eac:	20000114 	.word	0x20000114

08001eb0 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC3_IRQHandler>
	...

08001eb4 <__libc_init_array>:
 8001eb4:	b570      	push	{r4, r5, r6, lr}
 8001eb6:	2600      	movs	r6, #0
 8001eb8:	4d0c      	ldr	r5, [pc, #48]	; (8001eec <__libc_init_array+0x38>)
 8001eba:	4c0d      	ldr	r4, [pc, #52]	; (8001ef0 <__libc_init_array+0x3c>)
 8001ebc:	1b64      	subs	r4, r4, r5
 8001ebe:	10a4      	asrs	r4, r4, #2
 8001ec0:	42a6      	cmp	r6, r4
 8001ec2:	d109      	bne.n	8001ed8 <__libc_init_array+0x24>
 8001ec4:	f000 f81a 	bl	8001efc <_init>
 8001ec8:	2600      	movs	r6, #0
 8001eca:	4d0a      	ldr	r5, [pc, #40]	; (8001ef4 <__libc_init_array+0x40>)
 8001ecc:	4c0a      	ldr	r4, [pc, #40]	; (8001ef8 <__libc_init_array+0x44>)
 8001ece:	1b64      	subs	r4, r4, r5
 8001ed0:	10a4      	asrs	r4, r4, #2
 8001ed2:	42a6      	cmp	r6, r4
 8001ed4:	d105      	bne.n	8001ee2 <__libc_init_array+0x2e>
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001edc:	4798      	blx	r3
 8001ede:	3601      	adds	r6, #1
 8001ee0:	e7ee      	b.n	8001ec0 <__libc_init_array+0xc>
 8001ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee6:	4798      	blx	r3
 8001ee8:	3601      	adds	r6, #1
 8001eea:	e7f2      	b.n	8001ed2 <__libc_init_array+0x1e>
 8001eec:	08001f14 	.word	0x08001f14
 8001ef0:	08001f14 	.word	0x08001f14
 8001ef4:	08001f14 	.word	0x08001f14
 8001ef8:	08001f18 	.word	0x08001f18

08001efc <_init>:
 8001efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efe:	bf00      	nop
 8001f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f02:	bc08      	pop	{r3}
 8001f04:	469e      	mov	lr, r3
 8001f06:	4770      	bx	lr

08001f08 <_fini>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr
