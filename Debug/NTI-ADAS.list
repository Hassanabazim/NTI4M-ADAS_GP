
NTI-ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000708  08000708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000708  08000708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000708  08000708  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000708  08000708  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000708  08000708  00010708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800070c  0800070c  0001070c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  0800071c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800071c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001cc2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008a0  00000000  00000000  00021cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00022598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000298  00000000  00000000  000228b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002055  00000000  00000000  00022b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001c7f  00000000  00000000  00024ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009ac7  00000000  00000000  00026824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000302eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a90  00000000  00000000  00030340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080006f0 	.word	0x080006f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080006f0 	.word	0x080006f0

08000170 <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/**********************************************************************************************************************/
#elif(APPLICATION == COLLESION_AVOIDENCE)
	/**********************************************************************************************************************/


	while (1)
 8000174:	e7fe      	b.n	8000174 <App_voidstartApp+0x4>
	...

08000178 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 800017c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000180:	691b      	ldr	r3, [r3, #16]
 8000182:	f003 0302 	and.w	r3, r3, #2
 8000186:	2b00      	cmp	r3, #0
 8000188:	d00e      	beq.n	80001a8 <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 800018a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800018e:	691b      	ldr	r3, [r3, #16]
 8000190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000194:	f023 0302 	bic.w	r3, r3, #2
 8000198:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 800019a:	4b25      	ldr	r3, [pc, #148]	; (8000230 <TIM2_IRQHandler+0xb8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d002      	beq.n	80001a8 <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 80001a2:	4b23      	ldr	r3, [pc, #140]	; (8000230 <TIM2_IRQHandler+0xb8>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 80001a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ac:	691b      	ldr	r3, [r3, #16]
 80001ae:	f003 0304 	and.w	r3, r3, #4
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d00e      	beq.n	80001d4 <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 80001b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ba:	691b      	ldr	r3, [r3, #16]
 80001bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001c0:	f023 0304 	bic.w	r3, r3, #4
 80001c4:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 80001c6:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <TIM2_IRQHandler+0xb8>)
 80001c8:	685b      	ldr	r3, [r3, #4]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d002      	beq.n	80001d4 <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <TIM2_IRQHandler+0xb8>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 80001d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001d8:	691b      	ldr	r3, [r3, #16]
 80001da:	f003 0308 	and.w	r3, r3, #8
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d00e      	beq.n	8000200 <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 80001e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e6:	691b      	ldr	r3, [r3, #16]
 80001e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ec:	f023 0308 	bic.w	r3, r3, #8
 80001f0:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <TIM2_IRQHandler+0xb8>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d002      	beq.n	8000200 <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 80001fa:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <TIM2_IRQHandler+0xb8>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 8000200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000204:	691b      	ldr	r3, [r3, #16]
 8000206:	f003 0310 	and.w	r3, r3, #16
 800020a:	2b00      	cmp	r3, #0
 800020c:	d00e      	beq.n	800022c <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 800020e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000218:	f023 0310 	bic.w	r3, r3, #16
 800021c:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 800021e:	4b04      	ldr	r3, [pc, #16]	; (8000230 <TIM2_IRQHandler+0xb8>)
 8000220:	68db      	ldr	r3, [r3, #12]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d002      	beq.n	800022c <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 8000226:	4b02      	ldr	r3, [pc, #8]	; (8000230 <TIM2_IRQHandler+0xb8>)
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	4798      	blx	r3
		}
	}
}
 800022c:	bf00      	nop
 800022e:	bd80      	pop	{r7, pc}
 8000230:	20000028 	.word	0x20000028

08000234 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <ADC1_2_IRQHandler+0x24>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d008      	beq.n	8000252 <ADC1_2_IRQHandler+0x1e>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <ADC1_2_IRQHandler+0x28>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	085b      	lsrs	r3, r3, #1
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 800024c:	4b02      	ldr	r3, [pc, #8]	; (8000258 <ADC1_2_IRQHandler+0x24>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4798      	blx	r3
	}
}
 8000252:	bf00      	nop
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000068 	.word	0x20000068
 800025c:	40012400 	.word	0x40012400

08000260 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <EXTI0_IRQHandler+0x18>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d002      	beq.n	8000272 <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 800026c:	4b02      	ldr	r3, [pc, #8]	; (8000278 <EXTI0_IRQHandler+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4798      	blx	r3
	}
}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	2000006c 	.word	0x2000006c

0800027c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <EXTI1_IRQHandler+0x18>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d002      	beq.n	800028e <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 8000288:	4b02      	ldr	r3, [pc, #8]	; (8000294 <EXTI1_IRQHandler+0x18>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4798      	blx	r3
	}

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000006c 	.word	0x2000006c

08000298 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <EXTI2_IRQHandler+0x18>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 80002a4:	4b02      	ldr	r3, [pc, #8]	; (80002b0 <EXTI2_IRQHandler+0x18>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4798      	blx	r3
	}
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000006c 	.word	0x2000006c

080002b4 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <EXTI3_IRQHandler+0x18>)
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <EXTI3_IRQHandler+0x18>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4798      	blx	r3
	}
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000006c 	.word	0x2000006c

080002d0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <EXTI4_IRQHandler+0x18>)
 80002d6:	691b      	ldr	r3, [r3, #16]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 80002dc:	4b02      	ldr	r3, [pc, #8]	; (80002e8 <EXTI4_IRQHandler+0x18>)
 80002de:	691b      	ldr	r3, [r3, #16]
 80002e0:	4798      	blx	r3
	}
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000006c 	.word	0x2000006c

080002ec <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 80002f0:	4b14      	ldr	r3, [pc, #80]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d003      	beq.n	8000300 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 80002fe:	e01e      	b.n	800033e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d003      	beq.n	8000310 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4798      	blx	r3
}
 800030e:	e016      	b.n	800033e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	4798      	blx	r3
}
 800031e:	e00e      	b.n	800033e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000320:	4b08      	ldr	r3, [pc, #32]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d003      	beq.n	8000330 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 800032a:	6a1b      	ldr	r3, [r3, #32]
 800032c:	4798      	blx	r3
}
 800032e:	e006      	b.n	800033e <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000330:	4b04      	ldr	r3, [pc, #16]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 8000332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000334:	2b00      	cmp	r3, #0
 8000336:	d002      	beq.n	800033e <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8000338:	4b02      	ldr	r3, [pc, #8]	; (8000344 <EXTI9_5_IRQHandler+0x58>)
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4798      	blx	r3
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000006c 	.word	0x2000006c

08000348 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800034e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000350:	2b00      	cmp	r3, #0
 8000352:	d003      	beq.n	800035c <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 8000356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000358:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 800035a:	e026      	b.n	80003aa <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800035e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 8000366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000368:	4798      	blx	r3
}
 800036a:	e01e      	b.n	80003aa <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 800036c:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	2b00      	cmp	r3, #0
 8000372:	d003      	beq.n	800037c <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4798      	blx	r3
}
 800037a:	e016      	b.n	80003aa <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800037e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000380:	2b00      	cmp	r3, #0
 8000382:	d003      	beq.n	800038c <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 8000386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000388:	4798      	blx	r3
}
 800038a:	e00e      	b.n	80003aa <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800038e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000390:	2b00      	cmp	r3, #0
 8000392:	d003      	beq.n	800039c <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 8000396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000398:	4798      	blx	r3
}
 800039a:	e006      	b.n	80003aa <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 800039e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 80003a4:	4b02      	ldr	r3, [pc, #8]	; (80003b0 <EXTI15_10_IRQHandler+0x68>)
 80003a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000006c 	.word	0x2000006c

080003b4 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <SysTick_Handler+0x54>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 80003be:	4b13      	ldr	r3, [pc, #76]	; (800040c <SysTick_Handler+0x58>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d10e      	bne.n	80003e4 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 80003c6:	4b12      	ldr	r3, [pc, #72]	; (8000410 <SysTick_Handler+0x5c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a11      	ldr	r2, [pc, #68]	; (8000410 <SysTick_Handler+0x5c>)
 80003cc:	f023 0302 	bic.w	r3, r3, #2
 80003d0:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <SysTick_Handler+0x5c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <SysTick_Handler+0x5c>)
 80003d8:	f023 0301 	bic.w	r3, r3, #1
 80003dc:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <SysTick_Handler+0x5c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <SysTick_Handler+0x60>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 80003ec:	4b09      	ldr	r3, [pc, #36]	; (8000414 <SysTick_Handler+0x60>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <SysTick_Handler+0x5c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	0c1b      	lsrs	r3, r3, #16
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b01      	ldr	r3, [pc, #4]	; (8000408 <SysTick_Handler+0x54>)
 8000402:	701a      	strb	r2, [r3, #0]
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}
 8000408:	200000bb 	.word	0x200000bb
 800040c:	200000b0 	.word	0x200000b0
 8000410:	e000e010 	.word	0xe000e010
 8000414:	200000ac 	.word	0x200000ac

08000418 <TIM1_CC_IRQHandler>:
	}
	return SUCCESS;
}

void TIM1_CC_IRQHandler(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 800041c:	4b04      	ldr	r3, [pc, #16]	; (8000430 <TIM1_CC_IRQHandler+0x18>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d002      	beq.n	800042a <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 8000424:	4b02      	ldr	r3, [pc, #8]	; (8000430 <TIM1_CC_IRQHandler+0x18>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4798      	blx	r3
	}

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200000b4 	.word	0x200000b4

08000434 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 8000438:	4b24      	ldr	r3, [pc, #144]	; (80004cc <USART1_IRQHandler+0x98>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	09db      	lsrs	r3, r3, #7
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	2b00      	cmp	r3, #0
 8000446:	d018      	beq.n	800047a <USART1_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <USART1_IRQHandler+0x9c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	3301      	adds	r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	4b1f      	ldr	r3, [pc, #124]	; (80004d0 <USART1_IRQHandler+0x9c>)
 8000452:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <USART1_IRQHandler+0x9c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	461a      	mov	r2, r3
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <USART1_IRQHandler+0xa0>)
 800045c:	5c9b      	ldrb	r3, [r3, r2]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d103      	bne.n	800046a <USART1_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000462:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <USART1_IRQHandler+0x9c>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
 8000468:	e007      	b.n	800047a <USART1_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <USART1_IRQHandler+0x9c>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <USART1_IRQHandler+0xa0>)
 8000472:	5c9a      	ldrb	r2, [r3, r2]
 8000474:	4b15      	ldr	r3, [pc, #84]	; (80004cc <USART1_IRQHandler+0x98>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 800047a:	4b14      	ldr	r3, [pc, #80]	; (80004cc <USART1_IRQHandler+0x98>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	095b      	lsrs	r3, r3, #5
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	2b00      	cmp	r3, #0
 8000488:	d01c      	beq.n	80004c4 <USART1_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <USART1_IRQHandler+0x98>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	6859      	ldr	r1, [r3, #4]
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <USART1_IRQHandler+0xa4>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	b2c9      	uxtb	r1, r1
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <USART1_IRQHandler+0xa8>)
 800049a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <USART1_IRQHandler+0xa4>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <USART1_IRQHandler+0xa8>)
 80004a4:	5c9b      	ldrb	r3, [r3, r2]
 80004a6:	2b23      	cmp	r3, #35	; 0x23
 80004a8:	d106      	bne.n	80004b8 <USART1_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <USART1_IRQHandler+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <USART1_IRQHandler+0xac>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 80004b6:	e005      	b.n	80004c4 <USART1_IRQHandler+0x90>
			uart_RxBufferIndex++;
 80004b8:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <USART1_IRQHandler+0xa4>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	3301      	adds	r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <USART1_IRQHandler+0xa4>)
 80004c2:	701a      	strb	r2, [r3, #0]
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	20000000 	.word	0x20000000
 80004d0:	200000b9 	.word	0x200000b9
 80004d4:	200000d8 	.word	0x200000d8
 80004d8:	200000ba 	.word	0x200000ba
 80004dc:	200000bc 	.word	0x200000bc
 80004e0:	200000b8 	.word	0x200000b8

080004e4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <USART2_IRQHandler+0x98>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	09db      	lsrs	r3, r3, #7
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d018      	beq.n	800052a <USART2_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <USART2_IRQHandler+0x9c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	3301      	adds	r3, #1
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <USART2_IRQHandler+0x9c>)
 8000502:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <USART2_IRQHandler+0x9c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <USART2_IRQHandler+0xa0>)
 800050c:	5c9b      	ldrb	r3, [r3, r2]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <USART2_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <USART2_IRQHandler+0x9c>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	e007      	b.n	800052a <USART2_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <USART2_IRQHandler+0x9c>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	4b18      	ldr	r3, [pc, #96]	; (8000584 <USART2_IRQHandler+0xa0>)
 8000522:	5c9a      	ldrb	r2, [r3, r2]
 8000524:	4b15      	ldr	r3, [pc, #84]	; (800057c <USART2_IRQHandler+0x98>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 800052a:	4b14      	ldr	r3, [pc, #80]	; (800057c <USART2_IRQHandler+0x98>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	095b      	lsrs	r3, r3, #5
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	2b00      	cmp	r3, #0
 8000538:	d01c      	beq.n	8000574 <USART2_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <USART2_IRQHandler+0x98>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6859      	ldr	r1, [r3, #4]
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <USART2_IRQHandler+0xa4>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	b2c9      	uxtb	r1, r1
 8000548:	4b10      	ldr	r3, [pc, #64]	; (800058c <USART2_IRQHandler+0xa8>)
 800054a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <USART2_IRQHandler+0xa4>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <USART2_IRQHandler+0xa8>)
 8000554:	5c9b      	ldrb	r3, [r3, r2]
 8000556:	2b23      	cmp	r3, #35	; 0x23
 8000558:	d106      	bne.n	8000568 <USART2_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <USART2_IRQHandler+0xa4>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <USART2_IRQHandler+0xac>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000566:	e005      	b.n	8000574 <USART2_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <USART2_IRQHandler+0xa4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	b2da      	uxtb	r2, r3
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <USART2_IRQHandler+0xa4>)
 8000572:	701a      	strb	r2, [r3, #0]
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	20000000 	.word	0x20000000
 8000580:	200000b9 	.word	0x200000b9
 8000584:	200000d8 	.word	0x200000d8
 8000588:	200000ba 	.word	0x200000ba
 800058c:	200000bc 	.word	0x200000bc
 8000590:	200000b8 	.word	0x200000b8

08000594 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <USART3_IRQHandler+0x98>)
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	09db      	lsrs	r3, r3, #7
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d018      	beq.n	80005da <USART3_IRQHandler+0x46>
	{
		uart_TxBufferIndex++;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <USART3_IRQHandler+0x9c>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	b2da      	uxtb	r2, r3
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <USART3_IRQHandler+0x9c>)
 80005b2:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <USART3_IRQHandler+0x9c>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <USART3_IRQHandler+0xa0>)
 80005bc:	5c9b      	ldrb	r3, [r3, r2]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d103      	bne.n	80005ca <USART3_IRQHandler+0x36>
		{
			uart_TxBufferIndex = 0;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <USART3_IRQHandler+0x9c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
 80005c8:	e007      	b.n	80005da <USART3_IRQHandler+0x46>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <USART3_IRQHandler+0x9c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <USART3_IRQHandler+0xa0>)
 80005d2:	5c9a      	ldrb	r2, [r3, r2]
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <USART3_IRQHandler+0x98>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <USART3_IRQHandler+0x98>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	095b      	lsrs	r3, r3, #5
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d01c      	beq.n	8000624 <USART3_IRQHandler+0x90>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <USART3_IRQHandler+0x98>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	6859      	ldr	r1, [r3, #4]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <USART3_IRQHandler+0xa4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	b2c9      	uxtb	r1, r1
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <USART3_IRQHandler+0xa8>)
 80005fa:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <USART3_IRQHandler+0xa4>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <USART3_IRQHandler+0xa8>)
 8000604:	5c9b      	ldrb	r3, [r3, r2]
 8000606:	2b23      	cmp	r3, #35	; 0x23
 8000608:	d106      	bne.n	8000618 <USART3_IRQHandler+0x84>
		{
			uart_RxBufferIndex = 0;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <USART3_IRQHandler+0xa4>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <USART3_IRQHandler+0xac>)
 8000612:	2201      	movs	r2, #1
 8000614:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8000616:	e005      	b.n	8000624 <USART3_IRQHandler+0x90>
			uart_RxBufferIndex++;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <USART3_IRQHandler+0xa4>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <USART3_IRQHandler+0xa4>)
 8000622:	701a      	strb	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	20000000 	.word	0x20000000
 8000630:	200000b9 	.word	0x200000b9
 8000634:	200000d8 	.word	0x200000d8
 8000638:	200000ba 	.word	0x200000ba
 800063c:	200000bc 	.word	0x200000bc
 8000640:	200000b8 	.word	0x200000b8

08000644 <main>:


#include "APP_int.h"

int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	App_voidstartApp();
 8000648:	f7ff fd92 	bl	8000170 <App_voidstartApp>
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000656:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000658:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <LoopForever+0x6>)
  ldr r1, =_edata
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <LoopForever+0xe>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a0a      	ldr	r2, [pc, #40]	; (800069c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000674:	4c0a      	ldr	r4, [pc, #40]	; (80006a0 <LoopForever+0x16>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000682:	f000 f811 	bl	80006a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff ffdd 	bl	8000644 <main>

0800068a <LoopForever>:

LoopForever:
    b LoopForever
 800068a:	e7fe      	b.n	800068a <LoopForever>
  ldr   r0, =_estack
 800068c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000694:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000698:	08000710 	.word	0x08000710
  ldr r2, =_sbss
 800069c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006a0:	200000f4 	.word	0x200000f4

080006a4 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a4:	e7fe      	b.n	80006a4 <ADC3_IRQHandler>
	...

080006a8 <__libc_init_array>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	2600      	movs	r6, #0
 80006ac:	4d0c      	ldr	r5, [pc, #48]	; (80006e0 <__libc_init_array+0x38>)
 80006ae:	4c0d      	ldr	r4, [pc, #52]	; (80006e4 <__libc_init_array+0x3c>)
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d109      	bne.n	80006cc <__libc_init_array+0x24>
 80006b8:	f000 f81a 	bl	80006f0 <_init>
 80006bc:	2600      	movs	r6, #0
 80006be:	4d0a      	ldr	r5, [pc, #40]	; (80006e8 <__libc_init_array+0x40>)
 80006c0:	4c0a      	ldr	r4, [pc, #40]	; (80006ec <__libc_init_array+0x44>)
 80006c2:	1b64      	subs	r4, r4, r5
 80006c4:	10a4      	asrs	r4, r4, #2
 80006c6:	42a6      	cmp	r6, r4
 80006c8:	d105      	bne.n	80006d6 <__libc_init_array+0x2e>
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d0:	4798      	blx	r3
 80006d2:	3601      	adds	r6, #1
 80006d4:	e7ee      	b.n	80006b4 <__libc_init_array+0xc>
 80006d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006da:	4798      	blx	r3
 80006dc:	3601      	adds	r6, #1
 80006de:	e7f2      	b.n	80006c6 <__libc_init_array+0x1e>
 80006e0:	08000708 	.word	0x08000708
 80006e4:	08000708 	.word	0x08000708
 80006e8:	08000708 	.word	0x08000708
 80006ec:	0800070c 	.word	0x0800070c

080006f0 <_init>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr

080006fc <_fini>:
 80006fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fe:	bf00      	nop
 8000700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000702:	bc08      	pop	{r3}
 8000704:	469e      	mov	lr, r3
 8000706:	4770      	bx	lr
