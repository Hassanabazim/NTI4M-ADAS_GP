
NTI-ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015e0  080015e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015e0  080015e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015e0  080015e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e0  080015e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e0  080015e0  000115e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080015f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080015f4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000254c  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c4b  00000000  00000000  000225c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003f8  00000000  00000000  00023210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002da  00000000  00000000  00023608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023ac  00000000  00000000  000238e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002450  00000000  00000000  00025c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a6d0  00000000  00000000  000280de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000e58  00000000  00000000  000327b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00033608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080015c8 	.word	0x080015c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080015c8 	.word	0x080015c8

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	}
	/**********************************************************************************************************************/
#elif(APPLICATION == ADAPTIVE_CURISE_CONTROL)
	/**********************************************************************************************************************/

	MRCC_enSysClkINIT();
 8000950:	f000 fbf0 	bl	8001134 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 8000954:	2042      	movs	r0, #66	; 0x42
 8000956:	f000 fc33 	bl	80011c0 <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_TIM3);
 800095a:	2021      	movs	r0, #33	; 0x21
 800095c:	f000 fc30 	bl	80011c0 <MRCC_enEnablePeripheralCLK>
	MGPIO_enSetPinDirection(PORTA, PIN6, OUT_2MHZ_AF_PUSH_PULL);
 8000960:	220a      	movs	r2, #10
 8000962:	2106      	movs	r1, #6
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fa87 	bl	8000e78 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN7, OUT_2MHZ_AF_PUSH_PULL);
 800096a:	220a      	movs	r2, #10
 800096c:	2107      	movs	r1, #7
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fa82 	bl	8000e78 <MGPIO_enSetPinDirection>
	TIM3_PWM_Init();
 8000974:	f000 f8f4 	bl	8000b60 <TIM3_PWM_Init>
	HDCMOTOR_voidInit();
 8000978:	f000 f827 	bl	80009ca <HDCMOTOR_voidInit>
	TIM3_PWM_CH1_Generate(70);
 800097c:	2046      	movs	r0, #70	; 0x46
 800097e:	f000 f909 	bl	8000b94 <TIM3_PWM_CH1_Generate>
	TIM3_PWM_CH2_Generate(90);
 8000982:	205a      	movs	r0, #90	; 0x5a
 8000984:	f000 f960 	bl	8000c48 <TIM3_PWM_CH2_Generate>
		//		HDCMOTOR_voidTurnRight();
		//		MSYSTICK_enDelayMS(1000);
		//		HDCMOTOR_voidForwardBackwardStop();
		//		HDCMOTOR_voidDiretionalStop();
		//		MSYSTICK_enDelayMS(1000);
		HDCMOTOR_voidBackward();
 8000988:	f000 f845 	bl	8000a16 <HDCMOTOR_voidBackward>
		HDCMOTOR_voidTurnRight();
 800098c:	f000 f851 	bl	8000a32 <HDCMOTOR_voidTurnRight>
		MSYSTICK_enDelayMS(2000);
 8000990:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000994:	f000 fc56 	bl	8001244 <MSYSTICK_enDelayMS>
		HDCMOTOR_voidDiretionalStop();
 8000998:	f000 f867 	bl	8000a6a <HDCMOTOR_voidDiretionalStop>
		HDCMOTOR_voidForwardBackwardStop();
 800099c:	f000 f873 	bl	8000a86 <HDCMOTOR_voidForwardBackwardStop>
		MSYSTICK_enDelayMS(2000);
 80009a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009a4:	f000 fc4e 	bl	8001244 <MSYSTICK_enDelayMS>
		HDCMOTOR_voidForward();
 80009a8:	f000 f827 	bl	80009fa <HDCMOTOR_voidForward>
		HDCMOTOR_voidTurnLeft();
 80009ac:	f000 f84f 	bl	8000a4e <HDCMOTOR_voidTurnLeft>
		MSYSTICK_enDelayMS(2000);
 80009b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b4:	f000 fc46 	bl	8001244 <MSYSTICK_enDelayMS>
		HDCMOTOR_voidDiretionalStop();
 80009b8:	f000 f857 	bl	8000a6a <HDCMOTOR_voidDiretionalStop>
		HDCMOTOR_voidForwardBackwardStop();
 80009bc:	f000 f863 	bl	8000a86 <HDCMOTOR_voidForwardBackwardStop>
		MSYSTICK_enDelayMS(2000);
 80009c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009c4:	f000 fc3e 	bl	8001244 <MSYSTICK_enDelayMS>
		HDCMOTOR_voidBackward();
 80009c8:	e7de      	b.n	8000988 <App_voidstartApp+0x3c>

080009ca <HDCMOTOR_voidInit>:




void HDCMOTOR_voidInit(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
	MGPIO_enSetPinDirection(HDC_MOTOR_FORWARD_BACKWARD_PORT, FORWARD_PIN    , OUT_2MHZ_PUSH_PULL);
 80009ce:	2202      	movs	r2, #2
 80009d0:	2102      	movs	r1, #2
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fa50 	bl	8000e78 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(HDC_MOTOR_FORWARD_BACKWARD_PORT, BACKWARD_PIN   , OUT_2MHZ_PUSH_PULL);
 80009d8:	2202      	movs	r2, #2
 80009da:	2103      	movs	r1, #3
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fa4b 	bl	8000e78 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(HDC_MOTOR_DIRICTIONAL_PORT, TURN_LEFT_PIN  , OUT_2MHZ_PUSH_PULL);
 80009e2:	2202      	movs	r2, #2
 80009e4:	2105      	movs	r1, #5
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fa46 	bl	8000e78 <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(HDC_MOTOR_DIRICTIONAL_PORT, TURN_RIGHT_PIN , OUT_2MHZ_PUSH_PULL);
 80009ec:	2202      	movs	r2, #2
 80009ee:	2104      	movs	r1, #4
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fa41 	bl	8000e78 <MGPIO_enSetPinDirection>

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HDCMOTOR_voidForward>:
/**********************************************************************************************/

void HDCMOTOR_voidForward(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,BACKWARD_PIN,LOW);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2103      	movs	r1, #3
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 fb12 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,FORWARD_PIN,HIGH);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 fb0d 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HDCMOTOR_voidBackward>:
/*backward function */

/**********************************************************************************************/

void HDCMOTOR_voidBackward(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,FORWARD_PIN,LOW);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 fb04 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT,BACKWARD_PIN,HIGH);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2103      	movs	r1, #3
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 faff 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <HDCMOTOR_voidTurnRight>:
/*turn right an left functions*/

/**********************************************************************************************/

void HDCMOTOR_voidTurnRight(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_LEFT_PIN,LOW);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 faf6 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_RIGHT_PIN,HIGH);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2104      	movs	r1, #4
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 faf1 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <HDCMOTOR_voidTurnLeft>:

/**********************************************************************************************/
void HDCMOTOR_voidTurnLeft(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_RIGHT_PIN,LOW);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 fae8 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT,TURN_LEFT_PIN,HIGH);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2105      	movs	r1, #5
 8000a60:	2000      	movs	r0, #0
 8000a62:	f000 fae3 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HDCMOTOR_voidDiretionalStop>:

/* Stop functions */
/**********************************************************************************************/

void HDCMOTOR_voidDiretionalStop(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT ,TURN_RIGHT_PIN ,LOW);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2104      	movs	r1, #4
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fada 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_DIRICTIONAL_PORT ,TURN_LEFT_PIN, LOW);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fad5 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HDCMOTOR_voidForwardBackwardStop>:
/**********************************************************************************************/

void HDCMOTOR_voidForwardBackwardStop(void)
{
 8000a86:	b580      	push	{r7, lr}
 8000a88:	af00      	add	r7, sp, #0
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT ,BACKWARD_PIN ,LOW);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 facc 	bl	800102c <MGPIO_enSetPinValue>
	MGPIO_enSetPinValue(HDC_MOTOR_FORWARD_BACKWARD_PORT ,FORWARD_PIN, LOW);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fac7 	bl	800102c <MGPIO_enSetPinValue>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 8000aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00e      	beq.n	8000ad4 <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 8000ab6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aba:	691b      	ldr	r3, [r3, #16]
 8000abc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac0:	f023 0302 	bic.w	r3, r3, #2
 8000ac4:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d002      	beq.n	8000ad4 <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 8000ace:	4b23      	ldr	r3, [pc, #140]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 8000ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00e      	beq.n	8000b00 <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 8000ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aec:	f023 0304 	bic.w	r3, r3, #4
 8000af0:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 8000b00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b04:	691b      	ldr	r3, [r3, #16]
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d00e      	beq.n	8000b2c <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 8000b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b18:	f023 0308 	bic.w	r3, r3, #8
 8000b1c:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 8000b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00e      	beq.n	8000b58 <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 8000b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b3e:	691b      	ldr	r3, [r3, #16]
 8000b40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b44:	f023 0310 	bic.w	r3, r3, #16
 8000b48:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 8000b52:	4b02      	ldr	r3, [pc, #8]	; (8000b5c <TIM2_IRQHandler+0xb8>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	4798      	blx	r3
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000028 	.word	0x20000028

08000b60 <TIM3_PWM_Init>:




void TIM3_PWM_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	// Configure the PWM mode for TIM3
	TIM3->CR1 &= ~TIM_CR1_DIR; // Count up mode
 8000b64:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b6a:	f023 0310 	bic.w	r3, r3, #16
 8000b6e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_CMS; // Edge-aligned mode
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b76:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b7a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;  // Enable the timer
 8000b7c:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a03      	ldr	r2, [pc, #12]	; (8000b90 <TIM3_PWM_Init+0x30>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr
 8000b90:	40000400 	.word	0x40000400

08000b94 <TIM3_PWM_CH1_Generate>:



/*the used tim 3 PWM generation func */
void TIM3_PWM_CH1_Generate(u8 copy_u8Duty)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
	// Configure PWM mode for Channel 1
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; // PWM mode 1
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000ba4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000ba8:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Preload enable
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;   // Enable the output for Channel 1
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6213      	str	r3, [r2, #32]
	// Set the PWM period and duty cycle


	TIM3->PSC = 0 ;             						 // No prescaler
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = TIM3_MAX_NUM_OF_TICKS_CH1;           // Period (1 kHz PWM frequency)
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000bca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
	copy_u8Duty = 100-copy_u8Duty;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000bd6:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR1 = (u16)(((copy_u8Duty/100.0)*(TIM3_MAX_NUM_OF_TICKS_CH1-1))+1);        		 // Duty cycle (50%)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fc1a 	bl	8000414 <__aeabi_i2d>
 8000be0:	f04f 0200 	mov.w	r2, #0
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <TIM3_PWM_CH1_Generate+0xa8>)
 8000be6:	f7ff fda9 	bl	800073c <__aeabi_ddiv>
 8000bea:	4602      	mov	r2, r0
 8000bec:	460b      	mov	r3, r1
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <TIM3_PWM_CH1_Generate+0xac>)
 8000bf8:	f7ff fc76 	bl	80004e8 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4610      	mov	r0, r2
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <TIM3_PWM_CH1_Generate+0xb0>)
 8000c0a:	f7ff fab7 	bl	800017c <__adddf3>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	460b      	mov	r3, r1
 8000c12:	4610      	mov	r0, r2
 8000c14:	4619      	mov	r1, r3
 8000c16:	f7ff fe79 	bl	800090c <__aeabi_d2uiz>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <TIM3_PWM_CH1_Generate+0xa4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6013      	str	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	40590000 	.word	0x40590000
 8000c40:	408f3000 	.word	0x408f3000
 8000c44:	3ff00000 	.word	0x3ff00000

08000c48 <TIM3_PWM_CH2_Generate>:

void TIM3_PWM_CH2_Generate(u8 copy_u8Duty)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M; // PWM mode 1
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a25      	ldr	r2, [pc, #148]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c58:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000c5c:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE; // Preload enable
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c68:	6193      	str	r3, [r2, #24]
	TIM3->CCER  |= TIM_CCER_CC2E;   // Enable the output for Channel 2
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6213      	str	r3, [r2, #32]


	// Set the PWM period and duty cycle

	TIM3->PSC = 0;             // No prescaler
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = TIM3_MAX_NUM_OF_TICKS_CH2;           // Period (1 kHz PWM frequency)
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000c7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
	copy_u8Duty = 100-copy_u8Duty;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000c8a:	71fb      	strb	r3, [r7, #7]
	TIM3->CCR2 = (u16)(((copy_u8Duty/100.0)*(TIM3_MAX_NUM_OF_TICKS_CH1-1))+1);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fbc0 	bl	8000414 <__aeabi_i2d>
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <TIM3_PWM_CH2_Generate+0xa8>)
 8000c9a:	f7ff fd4f 	bl	800073c <__aeabi_ddiv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f04f 0200 	mov.w	r2, #0
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <TIM3_PWM_CH2_Generate+0xac>)
 8000cac:	f7ff fc1c 	bl	80004e8 <__aeabi_dmul>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 0200 	mov.w	r2, #0
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <TIM3_PWM_CH2_Generate+0xb0>)
 8000cbe:	f7ff fa5d 	bl	800017c <__adddf3>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f7ff fe1f 	bl	800090c <__aeabi_d2uiz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000cd4:	639a      	str	r2, [r3, #56]	; 0x38
	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <TIM3_PWM_CH2_Generate+0xa4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6013      	str	r3, [r2, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40000400 	.word	0x40000400
 8000cf0:	40590000 	.word	0x40590000
 8000cf4:	408f3000 	.word	0x408f3000
 8000cf8:	3ff00000 	.word	0x3ff00000

08000cfc <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <ADC1_2_IRQHandler+0x20>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d007      	beq.n	8000d18 <ADC1_2_IRQHandler+0x1c>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <ADC1_2_IRQHandler+0x24>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 8000d12:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <ADC1_2_IRQHandler+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4798      	blx	r3
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000068 	.word	0x20000068
 8000d20:	40012400 	.word	0x40012400

08000d24 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <EXTI0_IRQHandler+0x18>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <EXTI0_IRQHandler+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4798      	blx	r3
	}
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000006c 	.word	0x2000006c

08000d40 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <EXTI1_IRQHandler+0x18>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <EXTI1_IRQHandler+0x18>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4798      	blx	r3
	}

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	2000006c 	.word	0x2000006c

08000d5c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <EXTI2_IRQHandler+0x18>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 8000d68:	4b02      	ldr	r3, [pc, #8]	; (8000d74 <EXTI2_IRQHandler+0x18>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	4798      	blx	r3
	}
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000006c 	.word	0x2000006c

08000d78 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <EXTI3_IRQHandler+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <EXTI3_IRQHandler+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	4798      	blx	r3
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000006c 	.word	0x2000006c

08000d94 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <EXTI4_IRQHandler+0x18>)
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000da0:	4b02      	ldr	r3, [pc, #8]	; (8000dac <EXTI4_IRQHandler+0x18>)
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	4798      	blx	r3
	}
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	2000006c 	.word	0x2000006c

08000db0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000dc2:	e01e      	b.n	8000e02 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4798      	blx	r3
}
 8000dd2:	e016      	b.n	8000e02 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	4798      	blx	r3
}
 8000de2:	e00e      	b.n	8000e02 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dee:	6a1b      	ldr	r3, [r3, #32]
 8000df0:	4798      	blx	r3
}
 8000df2:	e006      	b.n	8000e02 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <EXTI9_5_IRQHandler+0x58>)
 8000dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e00:	4798      	blx	r3
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000006c 	.word	0x2000006c

08000e0c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 8000e1e:	e026      	b.n	8000e6e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2c:	4798      	blx	r3
}
 8000e2e:	e01e      	b.n	8000e6e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4798      	blx	r3
}
 8000e3e:	e016      	b.n	8000e6e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	4798      	blx	r3
}
 8000e4e:	e00e      	b.n	8000e6e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5c:	4798      	blx	r3
}
 8000e5e:	e006      	b.n	8000e6e <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <EXTI15_10_IRQHandler+0x68>)
 8000e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6c:	4798      	blx	r3
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000006c 	.word	0x2000006c

08000e78 <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
 8000e82:	460b      	mov	r3, r1
 8000e84:	71bb      	strb	r3, [r7, #6]
 8000e86:	4613      	mov	r3, r2
 8000e88:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d07f      	beq.n	8000f94 <MGPIO_enSetPinDirection+0x11c>
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	f300 80b9 	bgt.w	800100c <MGPIO_enSetPinDirection+0x194>
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <MGPIO_enSetPinDirection+0x2c>
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d03c      	beq.n	8000f1c <MGPIO_enSetPinDirection+0xa4>
 8000ea2:	e0b3      	b.n	800100c <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	d817      	bhi.n	8000eda <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000eaa:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	79ba      	ldrb	r2, [r7, #6]
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4a58      	ldr	r2, [pc, #352]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7979      	ldrb	r1, [r7, #5]
 8000ec8:	79ba      	ldrb	r2, [r7, #6]
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4a53      	ldr	r2, [pc, #332]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000ed8:	e09b      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000eda:	79bb      	ldrb	r3, [r7, #6]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d81a      	bhi.n	8000f16 <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	3b08      	subs	r3, #8
 8000ee4:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 8000ee6:	4b4e      	ldr	r3, [pc, #312]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	79ba      	ldrb	r2, [r7, #6]
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	210f      	movs	r1, #15
 8000ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000efa:	400b      	ands	r3, r1
 8000efc:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 8000efe:	4b48      	ldr	r3, [pc, #288]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	7979      	ldrb	r1, [r7, #5]
 8000f04:	79ba      	ldrb	r2, [r7, #6]
 8000f06:	0092      	lsls	r2, r2, #2
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a44      	ldr	r2, [pc, #272]	; (8001020 <MGPIO_enSetPinDirection+0x1a8>)
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6053      	str	r3, [r2, #4]
		break;
 8000f14:	e07d      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
		break;
 8000f1a:	e07a      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d817      	bhi.n	8000f52 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000f22:	4b40      	ldr	r3, [pc, #256]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	79ba      	ldrb	r2, [r7, #6]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	43d2      	mvns	r2, r2
 8000f32:	4611      	mov	r1, r2
 8000f34:	4a3b      	ldr	r2, [pc, #236]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f36:	400b      	ands	r3, r1
 8000f38:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000f3a:	4b3a      	ldr	r3, [pc, #232]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	7979      	ldrb	r1, [r7, #5]
 8000f40:	79ba      	ldrb	r2, [r7, #6]
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	fa01 f202 	lsl.w	r2, r1, r2
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4a36      	ldr	r2, [pc, #216]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000f50:	e05f      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000f52:	79bb      	ldrb	r3, [r7, #6]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d81a      	bhi.n	8000f8e <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	3b08      	subs	r3, #8
 8000f5c:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	79ba      	ldrb	r2, [r7, #6]
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	210f      	movs	r1, #15
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f72:	400b      	ands	r3, r1
 8000f74:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000f76:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	7979      	ldrb	r1, [r7, #5]
 8000f7c:	79ba      	ldrb	r2, [r7, #6]
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	fa01 f202 	lsl.w	r2, r1, r2
 8000f84:	4611      	mov	r1, r2
 8000f86:	4a27      	ldr	r2, [pc, #156]	; (8001024 <MGPIO_enSetPinDirection+0x1ac>)
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	6053      	str	r3, [r2, #4]
		break;
 8000f8c:	e041      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	73fb      	strb	r3, [r7, #15]
		break;
 8000f92:	e03e      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d817      	bhi.n	8000fca <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	4611      	mov	r1, r2
 8000fac:	4a1e      	ldr	r2, [pc, #120]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	7979      	ldrb	r1, [r7, #5]
 8000fb8:	79ba      	ldrb	r2, [r7, #6]
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a19      	ldr	r2, [pc, #100]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000fc8:	e023      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d81a      	bhi.n	8001006 <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	f06f 010f 	mvn.w	r1, #15
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	7979      	ldrb	r1, [r7, #5]
 8000ff4:	79ba      	ldrb	r2, [r7, #6]
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <MGPIO_enSetPinDirection+0x1b0>)
 8001000:	430b      	orrs	r3, r1
 8001002:	6053      	str	r3, [r2, #4]
		break;
 8001004:	e005      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
		break;
 800100a:	e002      	b.n	8001012 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
		break;
 8001010:	bf00      	nop
	}
	return local_state;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40010800 	.word	0x40010800
 8001024:	40010c00 	.word	0x40010c00
 8001028:	40011000 	.word	0x40011000

0800102c <MGPIO_enSetPinValue>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinValue(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, MGPIO_VALUE_t copy_u8Value)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	4613      	mov	r3, r2
 800103c:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 800103e:	2302      	movs	r3, #2
 8001040:	73fb      	strb	r3, [r7, #15]
	/*	@beief 		This APIs use to set the GPIO PIN
	 *  choose between High and Low Value state and set it in ODR
	 * */
	switch(copy_u8port)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d046      	beq.n	80010d6 <MGPIO_enSetPinValue+0xaa>
 8001048:	2b02      	cmp	r3, #2
 800104a:	dc64      	bgt.n	8001116 <MGPIO_enSetPinValue+0xea>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <MGPIO_enSetPinValue+0x2a>
 8001050:	2b01      	cmp	r3, #1
 8001052:	d020      	beq.n	8001096 <MGPIO_enSetPinValue+0x6a>
 8001054:	e05f      	b.n	8001116 <MGPIO_enSetPinValue+0xea>
	{
	case PORTA:
		if (copy_u8Value == HIGH)
 8001056:	797b      	ldrb	r3, [r7, #5]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d10a      	bne.n	8001072 <MGPIO_enSetPinValue+0x46>
		{
			SET_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <MGPIO_enSetPinValue+0xfc>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	79ba      	ldrb	r2, [r7, #6]
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	4611      	mov	r1, r2
 800106a:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <MGPIO_enSetPinValue+0xfc>)
 800106c:	430b      	orrs	r3, r1
 800106e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8001070:	e054      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d10b      	bne.n	8001090 <MGPIO_enSetPinValue+0x64>
			CLR_BIT(GPIOA->GPIO_ODR, copy_u8pin);
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MGPIO_enSetPinValue+0xfc>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	79ba      	ldrb	r2, [r7, #6]
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	43d2      	mvns	r2, r2
 8001086:	4611      	mov	r1, r2
 8001088:	4a27      	ldr	r2, [pc, #156]	; (8001128 <MGPIO_enSetPinValue+0xfc>)
 800108a:	400b      	ands	r3, r1
 800108c:	60d3      	str	r3, [r2, #12]
		break;
 800108e:	e045      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
		break;
 8001094:	e042      	b.n	800111c <MGPIO_enSetPinValue+0xf0>

	case PORTB:
		if (copy_u8Value == HIGH)
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d10a      	bne.n	80010b2 <MGPIO_enSetPinValue+0x86>
		{
			SET_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 800109c:	4b23      	ldr	r3, [pc, #140]	; (800112c <MGPIO_enSetPinValue+0x100>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	2101      	movs	r1, #1
 80010a4:	fa01 f202 	lsl.w	r2, r1, r2
 80010a8:	4611      	mov	r1, r2
 80010aa:	4a20      	ldr	r2, [pc, #128]	; (800112c <MGPIO_enSetPinValue+0x100>)
 80010ac:	430b      	orrs	r3, r1
 80010ae:	60d3      	str	r3, [r2, #12]
		else
		{
			local_state = OUT_OF_RANG_ERR;

		}
		break;
 80010b0:	e034      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10b      	bne.n	80010d0 <MGPIO_enSetPinValue+0xa4>
			CLR_BIT(GPIOB->GPIO_ODR, copy_u8pin);
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <MGPIO_enSetPinValue+0x100>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	79ba      	ldrb	r2, [r7, #6]
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	4611      	mov	r1, r2
 80010c8:	4a18      	ldr	r2, [pc, #96]	; (800112c <MGPIO_enSetPinValue+0x100>)
 80010ca:	400b      	ands	r3, r1
 80010cc:	60d3      	str	r3, [r2, #12]
		break;
 80010ce:	e025      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 80010d0:	2300      	movs	r3, #0
 80010d2:	73fb      	strb	r3, [r7, #15]
		break;
 80010d4:	e022      	b.n	800111c <MGPIO_enSetPinValue+0xf0>

	case PORTC:
		if (copy_u8Value == HIGH)
 80010d6:	797b      	ldrb	r3, [r7, #5]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10a      	bne.n	80010f2 <MGPIO_enSetPinValue+0xc6>
		{
			SET_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MGPIO_enSetPinValue+0x104>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	79ba      	ldrb	r2, [r7, #6]
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <MGPIO_enSetPinValue+0x104>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 80010f0:	e014      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
		else if(copy_u8Value == LOW)
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10b      	bne.n	8001110 <MGPIO_enSetPinValue+0xe4>
			CLR_BIT(GPIOC->GPIO_ODR, copy_u8pin);
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <MGPIO_enSetPinValue+0x104>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	79ba      	ldrb	r2, [r7, #6]
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	43d2      	mvns	r2, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a09      	ldr	r2, [pc, #36]	; (8001130 <MGPIO_enSetPinValue+0x104>)
 800110a:	400b      	ands	r3, r1
 800110c:	60d3      	str	r3, [r2, #12]
		break;
 800110e:	e005      	b.n	800111c <MGPIO_enSetPinValue+0xf0>
			local_state = OUT_OF_RANG_ERR;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
		break;
 8001114:	e002      	b.n	800111c <MGPIO_enSetPinValue+0xf0>

	default:
		local_state = OUT_OF_RANG_ERR;
 8001116:	2300      	movs	r3, #0
 8001118:	73fb      	strb	r3, [r7, #15]
		break;
 800111a:	bf00      	nop
	}
	return local_state;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40010800 	.word	0x40010800
 800112c:	40010c00 	.word	0x40010c00
 8001130:	40011000 	.word	0x40011000

08001134 <MRCC_enSysClkINIT>:
 * \Parameters (in) : None
 * \Return value:   : ErrorState_t  SUCEESS
 *
 *******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8001144:	bf00      	nop
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f9      	beq.n	8001146 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001168:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001178:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800117c:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800118c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001190:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001194:	4a09      	ldr	r2, [pc, #36]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	6053      	str	r3, [r2, #4]

	/*MASK the ADC clk and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_ADC_MASK;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 80011a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011a4:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_ADC_PRESCALER_MODE;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <MRCC_enSysClkINIT+0x88>)
 80011ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b0:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 80011b2:	2302      	movs	r3, #2
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40021000 	.word	0x40021000

080011c0 <MRCC_enEnablePeripheralCLK>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 80011ca:	2302      	movs	r3, #2
 80011cc:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b1f      	cmp	r3, #31
 80011d2:	d80a      	bhi.n	80011ea <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	4611      	mov	r1, r2
 80011e2:	4a17      	ldr	r2, [pc, #92]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 80011e4:	430b      	orrs	r3, r1
 80011e6:	6153      	str	r3, [r2, #20]
 80011e8:	e023      	b.n	8001232 <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d80d      	bhi.n	800120c <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	3b20      	subs	r3, #32
 80011f4:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	4611      	mov	r1, r2
 8001204:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 8001206:	430b      	orrs	r3, r1
 8001208:	61d3      	str	r3, [r2, #28]
 800120a:	e012      	b.n	8001232 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b5f      	cmp	r3, #95	; 0x5f
 8001210:	d80d      	bhi.n	800122e <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	3b40      	subs	r3, #64	; 0x40
 8001216:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	2101      	movs	r1, #1
 8001220:	fa01 f202 	lsl.w	r2, r1, r2
 8001224:	4611      	mov	r1, r2
 8001226:	4a06      	ldr	r2, [pc, #24]	; (8001240 <MRCC_enEnablePeripheralCLK+0x80>)
 8001228:	430b      	orrs	r3, r1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	e001      	b.n	8001232 <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <MSYSTICK_enDelayMS>:
 * \Parameters (in) : copy_u16delayMS
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 *******************************************************************************/
ErrorState_t MSYSTICK_enDelayMS(u16 copy_u16delayMS)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	 * 2. enable the systick
	 * 3. wait of the count flag if set, then register is zero
	 * 4. disable the systick
	 * 5. clear the value register to be reuse again */

	STK->STK_LOAD = copy_u16delayMS * 1000;
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001254:	fb03 f202 	mul.w	r2, r3, r2
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 800125a:	605a      	str	r2, [r3, #4]
	SET_BIT(STK->STK_CTRL, ENABLE);
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

	while (!(GET_BIT(STK->STK_CTRL, COUNTFLAG)));
 8001268:	bf00      	nop
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f9      	beq.n	800126a <MSYSTICK_enDelayMS+0x26>

	CLR_BIT(STK->STK_CTRL, ENABLE);
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	6013      	str	r3, [r2, #0]
	STK->STK_VAL = MSYSTICK_REG_CLEAR;
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <MSYSTICK_enDelayMS+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]

	return SUCCESS;
 8001288:	2302      	movs	r3, #2
}
 800128a:	4618      	mov	r0, r3
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	e000e010 	.word	0xe000e010

08001298 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <SysTick_Handler+0x54>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <SysTick_Handler+0x58>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10e      	bne.n	80012c8 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <SysTick_Handler+0x5c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <SysTick_Handler+0x5c>)
 80012b0:	f023 0302 	bic.w	r3, r3, #2
 80012b4:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <SysTick_Handler+0x5c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <SysTick_Handler+0x5c>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <SysTick_Handler+0x5c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <SysTick_Handler+0x60>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <SysTick_Handler+0x60>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <SysTick_Handler+0x5c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0c1b      	lsrs	r3, r3, #16
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b01      	ldr	r3, [pc, #4]	; (80012ec <SysTick_Handler+0x54>)
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200000b1 	.word	0x200000b1
 80012f0:	200000b0 	.word	0x200000b0
 80012f4:	e000e010 	.word	0xe000e010
 80012f8:	200000ac 	.word	0x200000ac

080012fc <TIM1_CC_IRQHandler>:
	}
	return SUCCESS;
}

void TIM1_CC_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <TIM1_CC_IRQHandler+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 8001308:	4b02      	ldr	r3, [pc, #8]	; (8001314 <TIM1_CC_IRQHandler+0x18>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4798      	blx	r3
	}

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200000b4 	.word	0x200000b4

08001318 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <USART1_IRQHandler+0x94>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	2b00      	cmp	r3, #0
 8001328:	d018      	beq.n	800135c <USART1_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <USART1_IRQHandler+0x98>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <USART1_IRQHandler+0x98>)
 8001334:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <USART1_IRQHandler+0x98>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <USART1_IRQHandler+0x9c>)
 800133e:	5c9b      	ldrb	r3, [r3, r2]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <USART1_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <USART1_IRQHandler+0x98>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e007      	b.n	800135c <USART1_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <USART1_IRQHandler+0x98>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <USART1_IRQHandler+0x9c>)
 8001354:	5c9a      	ldrb	r2, [r3, r2]
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <USART1_IRQHandler+0x94>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <USART1_IRQHandler+0x94>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0320 	and.w	r3, r3, #32
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01c      	beq.n	80013a4 <USART1_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <USART1_IRQHandler+0x94>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <USART1_IRQHandler+0xa0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	b2c9      	uxtb	r1, r1
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <USART1_IRQHandler+0xa4>)
 800137a:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <USART1_IRQHandler+0xa0>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <USART1_IRQHandler+0xa4>)
 8001384:	5c9b      	ldrb	r3, [r3, r2]
 8001386:	2b23      	cmp	r3, #35	; 0x23
 8001388:	d106      	bne.n	8001398 <USART1_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <USART1_IRQHandler+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <USART1_IRQHandler+0xa8>)
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001396:	e005      	b.n	80013a4 <USART1_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <USART1_IRQHandler+0xa0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <USART1_IRQHandler+0xa0>)
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000000 	.word	0x20000000
 80013b0:	200000b9 	.word	0x200000b9
 80013b4:	200000bc 	.word	0x200000bc
 80013b8:	200000ba 	.word	0x200000ba
 80013bc:	200000d8 	.word	0x200000d8
 80013c0:	200000b8 	.word	0x200000b8

080013c4 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <USART2_IRQHandler+0x94>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d018      	beq.n	8001408 <USART2_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <USART2_IRQHandler+0x98>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <USART2_IRQHandler+0x98>)
 80013e0:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <USART2_IRQHandler+0x98>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <USART2_IRQHandler+0x9c>)
 80013ea:	5c9b      	ldrb	r3, [r3, r2]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d103      	bne.n	80013f8 <USART2_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <USART2_IRQHandler+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <USART2_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <USART2_IRQHandler+0x98>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <USART2_IRQHandler+0x9c>)
 8001400:	5c9a      	ldrb	r2, [r3, r2]
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <USART2_IRQHandler+0x94>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <USART2_IRQHandler+0x94>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0320 	and.w	r3, r3, #32
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01c      	beq.n	8001450 <USART2_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <USART2_IRQHandler+0x94>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <USART2_IRQHandler+0xa0>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	b2c9      	uxtb	r1, r1
 8001424:	4b10      	ldr	r3, [pc, #64]	; (8001468 <USART2_IRQHandler+0xa4>)
 8001426:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <USART2_IRQHandler+0xa0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <USART2_IRQHandler+0xa4>)
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	2b23      	cmp	r3, #35	; 0x23
 8001434:	d106      	bne.n	8001444 <USART2_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <USART2_IRQHandler+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <USART2_IRQHandler+0xa8>)
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 8001442:	e005      	b.n	8001450 <USART2_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <USART2_IRQHandler+0xa0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <USART2_IRQHandler+0xa0>)
 800144e:	701a      	strb	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000000 	.word	0x20000000
 800145c:	200000b9 	.word	0x200000b9
 8001460:	200000bc 	.word	0x200000bc
 8001464:	200000ba 	.word	0x200000ba
 8001468:	200000d8 	.word	0x200000d8
 800146c:	200000b8 	.word	0x200000b8

08001470 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <USART3_IRQHandler+0x94>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147e:	2b00      	cmp	r3, #0
 8001480:	d018      	beq.n	80014b4 <USART3_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <USART3_IRQHandler+0x98>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <USART3_IRQHandler+0x98>)
 800148c:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 800148e:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <USART3_IRQHandler+0x98>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	461a      	mov	r2, r3
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <USART3_IRQHandler+0x9c>)
 8001496:	5c9b      	ldrb	r3, [r3, r2]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <USART3_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <USART3_IRQHandler+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
 80014a2:	e007      	b.n	80014b4 <USART3_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <USART3_IRQHandler+0x98>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <USART3_IRQHandler+0x9c>)
 80014ac:	5c9a      	ldrb	r2, [r3, r2]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <USART3_IRQHandler+0x94>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <USART3_IRQHandler+0x94>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d01c      	beq.n	80014fc <USART3_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <USART3_IRQHandler+0x94>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <USART3_IRQHandler+0xa0>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	b2c9      	uxtb	r1, r1
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <USART3_IRQHandler+0xa4>)
 80014d2:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <USART3_IRQHandler+0xa0>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <USART3_IRQHandler+0xa4>)
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	2b23      	cmp	r3, #35	; 0x23
 80014e0:	d106      	bne.n	80014f0 <USART3_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <USART3_IRQHandler+0xa0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <USART3_IRQHandler+0xa8>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 80014ee:	e005      	b.n	80014fc <USART3_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <USART3_IRQHandler+0xa0>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <USART3_IRQHandler+0xa0>)
 80014fa:	701a      	strb	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	20000000 	.word	0x20000000
 8001508:	200000b9 	.word	0x200000b9
 800150c:	200000bc 	.word	0x200000bc
 8001510:	200000ba 	.word	0x200000ba
 8001514:	200000d8 	.word	0x200000d8
 8001518:	200000b8 	.word	0x200000b8

0800151c <main>:


#include "APP_int.h"

int main(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	App_voidstartApp();
 8001520:	f7ff fa14 	bl	800094c <App_voidstartApp>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001530:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	; (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	; (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800155a:	f000 f811 	bl	8001580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff ffdd 	bl	800151c <main>

08001562 <LoopForever>:

LoopForever:
  b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   r0, =_estack
 8001564:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001570:	080015e8 	.word	0x080015e8
  ldr r2, =_sbss
 8001574:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001578:	200000f4 	.word	0x200000f4

0800157c <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC3_IRQHandler>
	...

08001580 <__libc_init_array>:
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	2600      	movs	r6, #0
 8001584:	4d0c      	ldr	r5, [pc, #48]	; (80015b8 <__libc_init_array+0x38>)
 8001586:	4c0d      	ldr	r4, [pc, #52]	; (80015bc <__libc_init_array+0x3c>)
 8001588:	1b64      	subs	r4, r4, r5
 800158a:	10a4      	asrs	r4, r4, #2
 800158c:	42a6      	cmp	r6, r4
 800158e:	d109      	bne.n	80015a4 <__libc_init_array+0x24>
 8001590:	f000 f81a 	bl	80015c8 <_init>
 8001594:	2600      	movs	r6, #0
 8001596:	4d0a      	ldr	r5, [pc, #40]	; (80015c0 <__libc_init_array+0x40>)
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <__libc_init_array+0x44>)
 800159a:	1b64      	subs	r4, r4, r5
 800159c:	10a4      	asrs	r4, r4, #2
 800159e:	42a6      	cmp	r6, r4
 80015a0:	d105      	bne.n	80015ae <__libc_init_array+0x2e>
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a8:	4798      	blx	r3
 80015aa:	3601      	adds	r6, #1
 80015ac:	e7ee      	b.n	800158c <__libc_init_array+0xc>
 80015ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80015b2:	4798      	blx	r3
 80015b4:	3601      	adds	r6, #1
 80015b6:	e7f2      	b.n	800159e <__libc_init_array+0x1e>
 80015b8:	080015e0 	.word	0x080015e0
 80015bc:	080015e0 	.word	0x080015e0
 80015c0:	080015e0 	.word	0x080015e0
 80015c4:	080015e4 	.word	0x080015e4

080015c8 <_init>:
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	bf00      	nop
 80015cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ce:	bc08      	pop	{r3}
 80015d0:	469e      	mov	lr, r3
 80015d2:	4770      	bx	lr

080015d4 <_fini>:
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d6:	bf00      	nop
 80015d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015da:	bc08      	pop	{r3}
 80015dc:	469e      	mov	lr, r3
 80015de:	4770      	bx	lr
