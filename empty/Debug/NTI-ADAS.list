
NTI-ADAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001188  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012b8  080012b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080012b8  080012b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080012b8  080012b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012b8  080012b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012b8  080012b8  000112b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012bc  080012bc  000112bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080012c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080012cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080012cc  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000022cc  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ba4  00000000  00000000  00022344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003a8  00000000  00000000  00022ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002a3  00000000  00000000  00023290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002335  00000000  00000000  00023533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021d7  00000000  00000000  00025868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a562  00000000  00000000  00027a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d84  00000000  00000000  00031fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00032d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080012a0 	.word	0x080012a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080012a0 	.word	0x080012a0

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <App_voidstartApp>:
 * \Parameters (in) : None
 *
 * \Return value:   : None
 *******************************************************************************/
void App_voidstartApp(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	}
	/**********************************************************************************************************************/
#elif(APPLICATION == ADAPTIVE_CURISE_CONTROL)
	/**********************************************************************************************************************/

	MRCC_enSysClkINIT();
 8000950:	f000 fa86 	bl	8000e60 <MRCC_enSysClkINIT>
	MRCC_enEnablePeripheralCLK(MRCC_IOPA);
 8000954:	2042      	movs	r0, #66	; 0x42
 8000956:	f000 fac9 	bl	8000eec <MRCC_enEnablePeripheralCLK>
	MRCC_enEnablePeripheralCLK(MRCC_TIM3);
 800095a:	2021      	movs	r0, #33	; 0x21
 800095c:	f000 fac6 	bl	8000eec <MRCC_enEnablePeripheralCLK>
	MGPIO_enSetPinDirection(PORTA, PIN2, OUT_2MHZ_PUSH_PULL);
 8000960:	2202      	movs	r2, #2
 8000962:	2102      	movs	r1, #2
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f9a1 	bl	8000cac <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN3, OUT_2MHZ_PUSH_PULL);
 800096a:	2202      	movs	r2, #2
 800096c:	2103      	movs	r1, #3
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f99c 	bl	8000cac <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN6, OUT_2MHZ_AF_PUSH_PULL);
 8000974:	220a      	movs	r2, #10
 8000976:	2106      	movs	r1, #6
 8000978:	2000      	movs	r0, #0
 800097a:	f000 f997 	bl	8000cac <MGPIO_enSetPinDirection>
	MGPIO_enSetPinDirection(PORTA, PIN7, OUT_2MHZ_AF_PUSH_PULL);
 800097e:	220a      	movs	r2, #10
 8000980:	2107      	movs	r1, #7
 8000982:	2000      	movs	r0, #0
 8000984:	f000 f992 	bl	8000cac <MGPIO_enSetPinDirection>
	TIM3_PWM_Init();
 8000988:	f000 f862 	bl	8000a50 <TIM3_PWM_Init>
	TIM3_PWM_CH1_Generate(60);
 800098c:	203c      	movs	r0, #60	; 0x3c
 800098e:	f000 f879 	bl	8000a84 <TIM3_PWM_CH1_Generate>

	while (1)
 8000992:	e7fe      	b.n	8000992 <App_voidstartApp+0x46>

08000994 <TIM2_IRQHandler>:

}



void TIM2_IRQHandler(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	/* CH1 ISR */
	if ((TIM2->SR & TIM_SR_CC1IF) != 0)
 8000998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800099c:	691b      	ldr	r3, [r3, #16]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00e      	beq.n	80009c4 <TIM2_IRQHandler+0x30>
	{
		// CC1IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC1IF);
 80009a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009aa:	691b      	ldr	r3, [r3, #16]
 80009ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b0:	f023 0302 	bic.w	r3, r3, #2
 80009b4:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][0] != NULL)
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <TIM2_IRQHandler+0x30>
		{
			input_capture_callback[0][0]();
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4798      	blx	r3
		}
	}

	/* CH2 ISR */
	if ((TIM2->SR & TIM_SR_CC2IF) != 0) {
 80009c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00e      	beq.n	80009f0 <TIM2_IRQHandler+0x5c>
		// CC2IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC2IF);
 80009d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009dc:	f023 0304 	bic.w	r3, r3, #4
 80009e0:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][1] != NULL) {
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <TIM2_IRQHandler+0x5c>
			input_capture_callback[0][1]();
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4798      	blx	r3
		}
	}

	/* CH3 ISR */
	if ((TIM2->SR & TIM_SR_CC3IF) != 0) {
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00e      	beq.n	8000a1c <TIM2_IRQHandler+0x88>
		// CC3IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC3IF);
 80009fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a08:	f023 0308 	bic.w	r3, r3, #8
 8000a0c:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][2] != NULL) {
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d002      	beq.n	8000a1c <TIM2_IRQHandler+0x88>
			input_capture_callback[0][2]();
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	4798      	blx	r3
		}
	}

	/* CH4 ISR */
	if ((TIM2->SR & TIM_SR_CC4IF) != 0) {
 8000a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a20:	691b      	ldr	r3, [r3, #16]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00e      	beq.n	8000a48 <TIM2_IRQHandler+0xb4>
		// CC4IF bit (clear interrupt flag)
		TIM2->SR &= ~(TIM_SR_CC4IF);
 8000a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a34:	f023 0310 	bic.w	r3, r3, #16
 8000a38:	6113      	str	r3, [r2, #16]

		if (input_capture_callback[0][3] != NULL) {
 8000a3a:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 8000a3c:	68db      	ldr	r3, [r3, #12]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <TIM2_IRQHandler+0xb4>
			input_capture_callback[0][3]();
 8000a42:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <TIM2_IRQHandler+0xb8>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	4798      	blx	r3
		}
	}
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000028 	.word	0x20000028

08000a50 <TIM3_PWM_Init>:




void TIM3_PWM_Init(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	// Configure the PWM mode for TIM3
	TIM3->CR1 &= ~TIM_CR1_DIR; // Count up mode
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a5a:	f023 0310 	bic.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
	TIM3->CR1 &= ~TIM_CR1_CMS; // Edge-aligned mode
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a66:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000a6a:	6013      	str	r3, [r2, #0]
	TIM3->CR1 |= TIM_CR1_CEN;  // Enable the timer
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <TIM3_PWM_Init+0x30>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40000400 	.word	0x40000400

08000a84 <TIM3_PWM_CH1_Generate>:



/*the used tim 3 PWM generation func */
void TIM3_PWM_CH1_Generate(u8 copy_u8Duty)
{	// Configure PWM mode for Channel 1
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M; // PWM mode 1
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000a94:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000a98:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Preload enable
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;   // Enable the output for Channel 1
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000aa8:	6a1b      	ldr	r3, [r3, #32]
 8000aaa:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6213      	str	r3, [r2, #32]
	// Set the PWM period and duty cycle


	TIM3->PSC = 0;             						 // No prescaler
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = TIM3_MAX_NUM_OF_TICKS_CH1;           // Period (1 kHz PWM frequency)
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000aba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = (u16)(((copy_u8Duty/100.0)*(TIM3_MAX_NUM_OF_TICKS_CH1-1))+1);        		 // Duty cycle (50%)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fca6 	bl	8000414 <__aeabi_i2d>
 8000ac8:	f04f 0200 	mov.w	r2, #0
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <TIM3_PWM_CH1_Generate+0xa0>)
 8000ace:	f7ff fe35 	bl	800073c <__aeabi_ddiv>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <TIM3_PWM_CH1_Generate+0xa4>)
 8000ae0:	f7ff fd02 	bl	80004e8 <__aeabi_dmul>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	4610      	mov	r0, r2
 8000aea:	4619      	mov	r1, r3
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <TIM3_PWM_CH1_Generate+0xa8>)
 8000af2:	f7ff fb43 	bl	800017c <__adddf3>
 8000af6:	4602      	mov	r2, r0
 8000af8:	460b      	mov	r3, r1
 8000afa:	4610      	mov	r0, r2
 8000afc:	4619      	mov	r1, r3
 8000afe:	f7ff ff05 	bl	800090c <__aeabi_d2uiz>
 8000b02:	4603      	mov	r3, r0
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
	// Enable the timer
	TIM3->CR1 |= TIM_CR1_CEN;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <TIM3_PWM_CH1_Generate+0x9c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40000400 	.word	0x40000400
 8000b24:	40590000 	.word	0x40590000
 8000b28:	408f3000 	.word	0x408f3000
 8000b2c:	3ff00000 	.word	0x3ff00000

08000b30 <ADC1_2_IRQHandler>:
/********************************************************************************
 * HANDLEAR IMPLEMENTATION
 ********************************************************************************/

void ADC1_2_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	if (ADC_CallBack != NULL)
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <ADC1_2_IRQHandler+0x20>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d007      	beq.n	8000b4c <ADC1_2_IRQHandler+0x1c>
	{
		if (GET_BIT(ADC->ADC_SR, EOC))
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <ADC1_2_IRQHandler+0x24>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
		}
		else if (GET_BIT(ADC->ADC_SR, JEOC))
		{

		}
		ADC_CallBack();
 8000b46:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <ADC1_2_IRQHandler+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4798      	blx	r3
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000068 	.word	0x20000068
 8000b54:	40012400 	.word	0x40012400

08000b58 <EXTI0_IRQHandler>:
 *********************************************************************************************************************/
/*	@brief 	Handlear has an callback fun from the App layer and Excecuted based on
 * 			the Selected Line on the Callback fun. */

void EXTI0_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI0_LINE] != NULL)
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <EXTI0_IRQHandler+0x18>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <EXTI0_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI0_LINE]();
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <EXTI0_IRQHandler+0x18>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4798      	blx	r3
	}
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000006c 	.word	0x2000006c

08000b74 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI1_LINE] != NULL)
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <EXTI1_IRQHandler+0x18>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <EXTI1_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI1_LINE]();
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <EXTI1_IRQHandler+0x18>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	4798      	blx	r3
	}

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000006c 	.word	0x2000006c

08000b90 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI2_LINE] != NULL)
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <EXTI2_IRQHandler+0x18>)
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d002      	beq.n	8000ba2 <EXTI2_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI2_LINE]();
 8000b9c:	4b02      	ldr	r3, [pc, #8]	; (8000ba8 <EXTI2_IRQHandler+0x18>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4798      	blx	r3
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000006c 	.word	0x2000006c

08000bac <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI3_LINE] != NULL)
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <EXTI3_IRQHandler+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <EXTI3_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI3_LINE]();
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <EXTI3_IRQHandler+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4798      	blx	r3
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000006c 	.word	0x2000006c

08000bc8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI4_LINE] != NULL)
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <EXTI4_IRQHandler+0x18>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d002      	beq.n	8000bda <EXTI4_IRQHandler+0x12>
	{
		MEXTI_CALLBACK[MEXTI4_LINE]();
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <EXTI4_IRQHandler+0x18>)
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	4798      	blx	r3
	}
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000006c 	.word	0x2000006c

08000be4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI5_LINE] != NULL)
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <EXTI9_5_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI5_LINE]();
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI9_LINE]();

	}
}
 8000bf6:	e01e      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI6_LINE] != NULL)
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <EXTI9_5_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI6_LINE]();
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4798      	blx	r3
}
 8000c06:	e016      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI7_LINE] != NULL)
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <EXTI9_5_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI7_LINE]();
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	4798      	blx	r3
}
 8000c16:	e00e      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI8_LINE] != NULL)
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <EXTI9_5_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI8_LINE]();
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c22:	6a1b      	ldr	r3, [r3, #32]
 8000c24:	4798      	blx	r3
}
 8000c26:	e006      	b.n	8000c36 <EXTI9_5_IRQHandler+0x52>
	else if (MEXTI_CALLBACK[MEXTI9_LINE] != NULL)
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d002      	beq.n	8000c36 <EXTI9_5_IRQHandler+0x52>
		MEXTI_CALLBACK[MEXTI9_LINE]();
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <EXTI9_5_IRQHandler+0x58>)
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	4798      	blx	r3
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000006c 	.word	0x2000006c

08000c40 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	if (MEXTI_CALLBACK[MEXTI10_LINE] != NULL)
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d003      	beq.n	8000c54 <EXTI15_10_IRQHandler+0x14>
	{
		MEXTI_CALLBACK[MEXTI10_LINE]();
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	4798      	blx	r3
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
	{
		MEXTI_CALLBACK[MEXTI15_LINE]();

	}
}
 8000c52:	e026      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI11_LINE] != NULL)
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <EXTI15_10_IRQHandler+0x24>
		MEXTI_CALLBACK[MEXTI11_LINE]();
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	4798      	blx	r3
}
 8000c62:	e01e      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI12_LINE] != NULL)
 8000c64:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <EXTI15_10_IRQHandler+0x34>
		MEXTI_CALLBACK[MEXTI12_LINE]();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4798      	blx	r3
}
 8000c72:	e016      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI13_LINE] != NULL)
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <EXTI15_10_IRQHandler+0x44>
		MEXTI_CALLBACK[MEXTI13_LINE]();
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c80:	4798      	blx	r3
}
 8000c82:	e00e      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI14_LINE] != NULL)
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <EXTI15_10_IRQHandler+0x54>
		MEXTI_CALLBACK[MEXTI14_LINE]();
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c90:	4798      	blx	r3
}
 8000c92:	e006      	b.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
	else if (MEXTI_CALLBACK[MEXTI15_LINE] != NULL)
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <EXTI15_10_IRQHandler+0x62>
		MEXTI_CALLBACK[MEXTI15_LINE]();
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <EXTI15_10_IRQHandler+0x68>)
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	4798      	blx	r3
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000006c 	.word	0x2000006c

08000cac <MGPIO_enSetPinDirection>:
 *
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/
ErrorState_t MGPIO_enSetPinDirection(MGPIO_PORT_t copy_u8port, MGPIO_PIN_t copy_u8pin, u8 copy_u8Mode)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	71bb      	strb	r3, [r7, #6]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	717b      	strb	r3, [r7, #5]
	ErrorState_t local_state = SUCCESS;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	73fb      	strb	r3, [r7, #15]
	 * 	3. Set the 4bit Configuration with the Selected Mode
	 *
	 * 	@اhint 	use 4bit Masked pins to clear and shifting it correspoinding with
	 * 			the Gpio pin and use that offest when setting the Mode
	 * */
	switch(copy_u8port)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d07f      	beq.n	8000dc8 <MGPIO_enSetPinDirection+0x11c>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	f300 80b9 	bgt.w	8000e40 <MGPIO_enSetPinDirection+0x194>
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <MGPIO_enSetPinDirection+0x2c>
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d03c      	beq.n	8000d50 <MGPIO_enSetPinDirection+0xa4>
 8000cd6:	e0b3      	b.n	8000e40 <MGPIO_enSetPinDirection+0x194>
	{
	case PORTA:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d817      	bhi.n	8000d0e <MGPIO_enSetPinDirection+0x62>
		{
			GPIOA->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000cde:	4b5d      	ldr	r3, [pc, #372]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	79ba      	ldrb	r2, [r7, #6]
 8000ce4:	0092      	lsls	r2, r2, #2
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cec:	43d2      	mvns	r2, r2
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4a58      	ldr	r2, [pc, #352]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000cf2:	400b      	ands	r3, r1
 8000cf4:	6013      	str	r3, [r2, #0]
			GPIOA->GPIO_CRL |= copy_u8Mode << (copy_u8pin * MGPIO_OFFSET) ;
 8000cf6:	4b57      	ldr	r3, [pc, #348]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	7979      	ldrb	r1, [r7, #5]
 8000cfc:	79ba      	ldrb	r2, [r7, #6]
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	4611      	mov	r1, r2
 8000d06:	4a53      	ldr	r2, [pc, #332]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d08:	430b      	orrs	r3, r1
 8000d0a:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000d0c:	e09b      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d81a      	bhi.n	8000d4a <MGPIO_enSetPinDirection+0x9e>
			copy_u8pin -= MGPIO_CRL_MAX  ;
 8000d14:	79bb      	ldrb	r3, [r7, #6]
 8000d16:	3b08      	subs	r3, #8
 8000d18:	71bb      	strb	r3, [r7, #6]
			GPIOA->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET));
 8000d1a:	4b4e      	ldr	r3, [pc, #312]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	79ba      	ldrb	r2, [r7, #6]
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	210f      	movs	r1, #15
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a49      	ldr	r2, [pc, #292]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d2e:	400b      	ands	r3, r1
 8000d30:	6053      	str	r3, [r2, #4]
			GPIOA->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET));
 8000d32:	4b48      	ldr	r3, [pc, #288]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	7979      	ldrb	r1, [r7, #5]
 8000d38:	79ba      	ldrb	r2, [r7, #6]
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d40:	4611      	mov	r1, r2
 8000d42:	4a44      	ldr	r2, [pc, #272]	; (8000e54 <MGPIO_enSetPinDirection+0x1a8>)
 8000d44:	430b      	orrs	r3, r1
 8000d46:	6053      	str	r3, [r2, #4]
		break;
 8000d48:	e07d      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000d4e:	e07a      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	case PORTB:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b07      	cmp	r3, #7
 8000d54:	d817      	bhi.n	8000d86 <MGPIO_enSetPinDirection+0xda>
		{
			GPIOB->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	79ba      	ldrb	r2, [r7, #6]
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	210f      	movs	r1, #15
 8000d60:	fa01 f202 	lsl.w	r2, r1, r2
 8000d64:	43d2      	mvns	r2, r2
 8000d66:	4611      	mov	r1, r2
 8000d68:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d6a:	400b      	ands	r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
			GPIOB->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	7979      	ldrb	r1, [r7, #5]
 8000d74:	79ba      	ldrb	r2, [r7, #6]
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7c:	4611      	mov	r1, r2
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000d84:	e05f      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000d86:	79bb      	ldrb	r3, [r7, #6]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d81a      	bhi.n	8000dc2 <MGPIO_enSetPinDirection+0x116>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	71bb      	strb	r3, [r7, #6]
			GPIOB->GPIO_CRH &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000d92:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	4611      	mov	r1, r2
 8000da4:	4a2c      	ldr	r2, [pc, #176]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	6053      	str	r3, [r2, #4]
			GPIOB->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000daa:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	7979      	ldrb	r1, [r7, #5]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	4611      	mov	r1, r2
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <MGPIO_enSetPinDirection+0x1ac>)
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6053      	str	r3, [r2, #4]
		break;
 8000dc0:	e041      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]
		break;
 8000dc6:	e03e      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	case PORTC:
		if (copy_u8pin < MGPIO_CRL_MAX)
 8000dc8:	79bb      	ldrb	r3, [r7, #6]
 8000dca:	2b07      	cmp	r3, #7
 8000dcc:	d817      	bhi.n	8000dfe <MGPIO_enSetPinDirection+0x152>
		{
			GPIOC->GPIO_CRL &= ~(MGPIO_MASK << (copy_u8pin * MGPIO_OFFSET)) ;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	0092      	lsls	r2, r2, #2
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	4611      	mov	r1, r2
 8000de0:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000de2:	400b      	ands	r3, r1
 8000de4:	6013      	str	r3, [r2, #0]
			GPIOC->GPIO_CRL |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	7979      	ldrb	r1, [r7, #5]
 8000dec:	79ba      	ldrb	r2, [r7, #6]
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	fa01 f202 	lsl.w	r2, r1, r2
 8000df4:	4611      	mov	r1, r2
 8000df6:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	6013      	str	r3, [r2, #0]
		}
		else
		{
			local_state = OUT_OF_RANG_ERR;
		}
		break;
 8000dfc:	e023      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
		else if(copy_u8pin < MGPIO_CRH_MAX)
 8000dfe:	79bb      	ldrb	r3, [r7, #6]
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d81a      	bhi.n	8000e3a <MGPIO_enSetPinDirection+0x18e>
			copy_u8pin -= MGPIO_CRL_MAX ;
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	71bb      	strb	r3, [r7, #6]
			GPIOC->GPIO_CRH &= ~(MGPIO_MASK) << (copy_u8pin * MGPIO_OFFSET) ;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	79ba      	ldrb	r2, [r7, #6]
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	f06f 010f 	mvn.w	r1, #15
 8000e16:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e1e:	400b      	ands	r3, r1
 8000e20:	6053      	str	r3, [r2, #4]
			GPIOC->GPIO_CRH |= (copy_u8Mode << (copy_u8pin * MGPIO_OFFSET)) ;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	7979      	ldrb	r1, [r7, #5]
 8000e28:	79ba      	ldrb	r2, [r7, #6]
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	4611      	mov	r1, r2
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <MGPIO_enSetPinDirection+0x1b0>)
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6053      	str	r3, [r2, #4]
		break;
 8000e38:	e005      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>
			local_state = OUT_OF_RANG_ERR;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000e3e:	e002      	b.n	8000e46 <MGPIO_enSetPinDirection+0x19a>

	default:
		local_state = OUT_OF_RANG_ERR;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
		break;
 8000e44:	bf00      	nop
	}
	return local_state;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	40011000 	.word	0x40011000

08000e60 <MRCC_enSysClkINIT>:
 * \Parameters (in) : None
 * \Return value:   : ErrorState_t  SUCEESS
 *
 *******************************************************************************/
ErrorState_t MRCC_enSysClkINIT(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0


	/** CLK source is HSI **/
#elif(MRCC_CLK_TYPE == MRCC_HSI)
	/* 1. ENABLE the HSI */
	SET_BIT(RCC->RCC_CR, HSION);
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]

	/* 2. wait till HSE is READY 'settling time finished', stable */
	while (!(GET_BIT(RCC->RCC_CR, HSIRDY)));
 8000e70:	bf00      	nop
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <MRCC_enSysClkINIT+0x12>

	/* 3. Enable System switch clock with HSI */
	CLR_BIT(RCC->RCC_CFGR, SWC);
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6053      	str	r3, [r2, #4]

#else
#error("WRONG CLK TYPE");
#endif
	/* MASK the AHB and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_AHB_MASK;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e94:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_AHB_PRESCALER;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e98:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	6053      	str	r3, [r2, #4]

	/* MASK the APB1 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB1_MASK;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ea4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ea8:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB1_PRESCALER_MODE;
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	6053      	str	r3, [r2, #4]

	/* MASK the APB2 and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_APB2_MASK;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000eb8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ebc:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_APB2_PRESCALER_MODE;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ec0:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	6053      	str	r3, [r2, #4]

	/*MASK the ADC clk and set the value of the chosen prescaler*/
	RCC->RCC_CFGR &= MRCC_ADC_MASK;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ecc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed0:	6053      	str	r3, [r2, #4]
	RCC->RCC_CFGR |= MRCC_ADC_PRESCALER_MODE;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <MRCC_enSysClkINIT+0x88>)
 8000ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000edc:	6053      	str	r3, [r2, #4]
		RCC->RCC_CFGR &= MRCC_MCO_MASK;
		RCC->RCC_CFGR |= MRCC_MCO_MODE ;
	}
#endif

	return SUCCESS;
 8000ede:	2302      	movs	r3, #2
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	40021000 	.word	0x40021000

08000eec <MRCC_enEnablePeripheralCLK>:
 * \Return value:   : ErrorState_t  -> SUCEESS
 * 								   -> OUT_OF_RANG_ERR
 *******************************************************************************/

ErrorState_t MRCC_enEnablePeripheralCLK(u8 copy_u8Peripheral)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	ErrorState_t local_state = SUCCESS;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	73fb      	strb	r3, [r7, #15]

	/* based on predefined Peripheral, switch to corresponding Register, and Enabled it*/
	if (copy_u8Peripheral < MRCC_AHB_REG)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b1f      	cmp	r3, #31
 8000efe:	d80a      	bhi.n	8000f16 <MRCC_enEnablePeripheralCLK+0x2a>
		SET_BIT(RCC->RCC_AHBENR, copy_u8Peripheral);
 8000f00:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	79fa      	ldrb	r2, [r7, #7]
 8000f06:	2101      	movs	r1, #1
 8000f08:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6153      	str	r3, [r2, #20]
 8000f14:	e023      	b.n	8000f5e <MRCC_enEnablePeripheralCLK+0x72>

	else if (copy_u8Peripheral < MRCC_APB1_REG)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b3f      	cmp	r3, #63	; 0x3f
 8000f1a:	d80d      	bhi.n	8000f38 <MRCC_enEnablePeripheralCLK+0x4c>
	{
		copy_u8Peripheral -= MRCC_AHB_REG;
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3b20      	subs	r3, #32
 8000f20:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB1ENR, copy_u8Peripheral);
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	79fa      	ldrb	r2, [r7, #7]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f32:	430b      	orrs	r3, r1
 8000f34:	61d3      	str	r3, [r2, #28]
 8000f36:	e012      	b.n	8000f5e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else if (copy_u8Peripheral < MRCC_APB2_REG)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b5f      	cmp	r3, #95	; 0x5f
 8000f3c:	d80d      	bhi.n	8000f5a <MRCC_enEnablePeripheralCLK+0x6e>
	{
		copy_u8Peripheral -= MRCC_APB1_REG;
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3b40      	subs	r3, #64	; 0x40
 8000f42:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->RCC_APB2ENR, copy_u8Peripheral);
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <MRCC_enEnablePeripheralCLK+0x80>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	e001      	b.n	8000f5e <MRCC_enEnablePeripheralCLK+0x72>
	}

	else
	{
		local_state = OUT_OF_RANG_ERR;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
	}
	return local_state;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <SysTick_Handler>:

/**********************************************************************************************************************
 * HANDLER
 *********************************************************************************************************************/
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	 * 1. clear the temp var to ba able to set the INT flag by reading it
	 * 2. disable the TICK INT
	 * 3. disable the systick
	 * 4. clear the value register
	 * 5. call the APP call back function from MCAL Layer */
	local_u8temp = 0;
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <SysTick_Handler+0x54>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	if (global_u8flag == 1)
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <SysTick_Handler+0x58>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d10e      	bne.n	8000fa0 <SysTick_Handler+0x30>
	{
		CLR_BIT(STK->STK_CTRL, TICKINT);
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <SysTick_Handler+0x5c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a11      	ldr	r2, [pc, #68]	; (8000fcc <SysTick_Handler+0x5c>)
 8000f88:	f023 0302 	bic.w	r3, r3, #2
 8000f8c:	6013      	str	r3, [r2, #0]
		CLR_BIT(STK->STK_CTRL, ENABLE);
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <SysTick_Handler+0x5c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <SysTick_Handler+0x5c>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6013      	str	r3, [r2, #0]
		STK->STK_VAL = MSYSTICK_REG_CLEAR;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <SysTick_Handler+0x5c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
	}

	if (MSYSTICK_Callback != NULL)
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <SysTick_Handler+0x60>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d002      	beq.n	8000fae <SysTick_Handler+0x3e>
	{
		MSYSTICK_Callback();
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <SysTick_Handler+0x60>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4798      	blx	r3
	}

	local_u8temp = GET_BIT(STK->STK_CTRL,COUNTFLAG);
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <SysTick_Handler+0x5c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b01      	ldr	r3, [pc, #4]	; (8000fc4 <SysTick_Handler+0x54>)
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200000b1 	.word	0x200000b1
 8000fc8:	200000b0 	.word	0x200000b0
 8000fcc:	e000e010 	.word	0xe000e010
 8000fd0:	200000ac 	.word	0x200000ac

08000fd4 <TIM1_CC_IRQHandler>:
	}
	return SUCCESS;
}

void TIM1_CC_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	if (ICU_callback != NULL)
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <TIM1_CC_IRQHandler+0x18>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <TIM1_CC_IRQHandler+0x12>
	{
		ICU_callback();
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <TIM1_CC_IRQHandler+0x18>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4798      	blx	r3
	}

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000b4 	.word	0x200000b4

08000ff0 <USART1_IRQHandler>:
 * 			when receiving data by interrupt, 1. get the first byte from the data register
 * 			2. check if that byte the ENDline byte, if so then reset the index and set the Rec_flag
 * 			3. if was not update the index to receieve the next byte */

void USART1_IRQHandler (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART1]->USART_SR, TXE)))
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <USART1_IRQHandler+0x94>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d018      	beq.n	8001034 <USART1_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <USART1_IRQHandler+0x98>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <USART1_IRQHandler+0x98>)
 800100c:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 800100e:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <USART1_IRQHandler+0x98>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <USART1_IRQHandler+0x9c>)
 8001016:	5c9b      	ldrb	r3, [r3, r2]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <USART1_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <USART1_IRQHandler+0x98>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
 8001022:	e007      	b.n	8001034 <USART1_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART1]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <USART1_IRQHandler+0x98>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <USART1_IRQHandler+0x9c>)
 800102c:	5c9a      	ldrb	r2, [r3, r2]
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <USART1_IRQHandler+0x94>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART1]->USART_SR, RXNE))
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <USART1_IRQHandler+0x94>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	2b00      	cmp	r3, #0
 8001040:	d01c      	beq.n	800107c <USART1_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <USART1_IRQHandler+0x94>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6859      	ldr	r1, [r3, #4]
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <USART1_IRQHandler+0xa0>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	b2c9      	uxtb	r1, r1
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <USART1_IRQHandler+0xa4>)
 8001052:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <USART1_IRQHandler+0xa0>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <USART1_IRQHandler+0xa4>)
 800105c:	5c9b      	ldrb	r3, [r3, r2]
 800105e:	2b23      	cmp	r3, #35	; 0x23
 8001060:	d106      	bne.n	8001070 <USART1_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <USART1_IRQHandler+0xa0>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <USART1_IRQHandler+0xa8>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 800106e:	e005      	b.n	800107c <USART1_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <USART1_IRQHandler+0xa0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <USART1_IRQHandler+0xa0>)
 800107a:	701a      	strb	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	20000000 	.word	0x20000000
 8001088:	200000b9 	.word	0x200000b9
 800108c:	200000bc 	.word	0x200000bc
 8001090:	200000ba 	.word	0x200000ba
 8001094:	200000d8 	.word	0x200000d8
 8001098:	200000b8 	.word	0x200000b8

0800109c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

	if ((GET_BIT(USART_CH[MUSART2]->USART_SR, TXE)))
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <USART2_IRQHandler+0x94>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d018      	beq.n	80010e0 <USART2_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <USART2_IRQHandler+0x98>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <USART2_IRQHandler+0x98>)
 80010b8:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <USART2_IRQHandler+0x98>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <USART2_IRQHandler+0x9c>)
 80010c2:	5c9b      	ldrb	r3, [r3, r2]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <USART2_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <USART2_IRQHandler+0x98>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
 80010ce:	e007      	b.n	80010e0 <USART2_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART2]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <USART2_IRQHandler+0x98>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <USART2_IRQHandler+0x9c>)
 80010d8:	5c9a      	ldrb	r2, [r3, r2]
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <USART2_IRQHandler+0x94>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	605a      	str	r2, [r3, #4]

		}
	}

	if (GET_BIT(USART_CH[MUSART2]->USART_SR, RXNE))
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <USART2_IRQHandler+0x94>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0320 	and.w	r3, r3, #32
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d01c      	beq.n	8001128 <USART2_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART1]->USART_DR ;
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <USART2_IRQHandler+0x94>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <USART2_IRQHandler+0xa0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <USART2_IRQHandler+0xa4>)
 80010fe:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <USART2_IRQHandler+0xa0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <USART2_IRQHandler+0xa4>)
 8001108:	5c9b      	ldrb	r3, [r3, r2]
 800110a:	2b23      	cmp	r3, #35	; 0x23
 800110c:	d106      	bne.n	800111c <USART2_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <USART2_IRQHandler+0xa0>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <USART2_IRQHandler+0xa8>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 800111a:	e005      	b.n	8001128 <USART2_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <USART2_IRQHandler+0xa0>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <USART2_IRQHandler+0xa0>)
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	20000000 	.word	0x20000000
 8001134:	200000b9 	.word	0x200000b9
 8001138:	200000bc 	.word	0x200000bc
 800113c:	200000ba 	.word	0x200000ba
 8001140:	200000d8 	.word	0x200000d8
 8001144:	200000b8 	.word	0x200000b8

08001148 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
	if ((GET_BIT(USART_CH[MUSART3]->USART_SR, TXE)))
 800114c:	4b23      	ldr	r3, [pc, #140]	; (80011dc <USART3_IRQHandler+0x94>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	2b00      	cmp	r3, #0
 8001158:	d018      	beq.n	800118c <USART3_IRQHandler+0x44>
	{
		uart_TxBufferIndex++;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <USART3_IRQHandler+0x98>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <USART3_IRQHandler+0x98>)
 8001164:	701a      	strb	r2, [r3, #0]
		if (uart_TxBUFFER[uart_TxBufferIndex] == MUSART_NULL_CHR)
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <USART3_IRQHandler+0x98>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <USART3_IRQHandler+0x9c>)
 800116e:	5c9b      	ldrb	r3, [r3, r2]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d103      	bne.n	800117c <USART3_IRQHandler+0x34>
		{
			uart_TxBufferIndex = 0;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <USART3_IRQHandler+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <USART3_IRQHandler+0x44>
		}
		else
		{
			USART_CH[MUSART3]->USART_DR =  uart_TxBUFFER[uart_TxBufferIndex];
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <USART3_IRQHandler+0x98>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <USART3_IRQHandler+0x9c>)
 8001184:	5c9a      	ldrb	r2, [r3, r2]
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <USART3_IRQHandler+0x94>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	605a      	str	r2, [r3, #4]
		}
	}

	if (GET_BIT(USART_CH[MUSART3]->USART_SR, RXNE))
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <USART3_IRQHandler+0x94>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	2b00      	cmp	r3, #0
 8001198:	d01c      	beq.n	80011d4 <USART3_IRQHandler+0x8c>
	{
		uart_RxBUFFER[uart_RxBufferIndex] = USART_CH[MUSART3]->USART_DR ;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <USART3_IRQHandler+0x94>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	6859      	ldr	r1, [r3, #4]
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <USART3_IRQHandler+0xa0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	b2c9      	uxtb	r1, r1
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <USART3_IRQHandler+0xa4>)
 80011aa:	5499      	strb	r1, [r3, r2]

		if (uart_RxBUFFER[uart_RxBufferIndex] == MUSART_END_LINE)
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <USART3_IRQHandler+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <USART3_IRQHandler+0xa4>)
 80011b4:	5c9b      	ldrb	r3, [r3, r2]
 80011b6:	2b23      	cmp	r3, #35	; 0x23
 80011b8:	d106      	bne.n	80011c8 <USART3_IRQHandler+0x80>
		{
			uart_RxBufferIndex = 0;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <USART3_IRQHandler+0xa0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
			Receive_Flag = 1;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <USART3_IRQHandler+0xa8>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
		else
		{
			uart_RxBufferIndex++;
		}
	}
}
 80011c6:	e005      	b.n	80011d4 <USART3_IRQHandler+0x8c>
			uart_RxBufferIndex++;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <USART3_IRQHandler+0xa0>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <USART3_IRQHandler+0xa0>)
 80011d2:	701a      	strb	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000000 	.word	0x20000000
 80011e0:	200000b9 	.word	0x200000b9
 80011e4:	200000bc 	.word	0x200000bc
 80011e8:	200000ba 	.word	0x200000ba
 80011ec:	200000d8 	.word	0x200000d8
 80011f0:	200000b8 	.word	0x200000b8

080011f4 <main>:


#include "APP_int.h"

int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	App_voidstartApp();
 80011f8:	f7ff fba8 	bl	800094c <App_voidstartApp>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001232:	f000 f811 	bl	8001258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001236:	f7ff ffdd 	bl	80011f4 <main>

0800123a <LoopForever>:

LoopForever:
  b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   r0, =_estack
 800123c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001248:	080012c0 	.word	0x080012c0
  ldr r2, =_sbss
 800124c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001250:	200000f4 	.word	0x200000f4

08001254 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC3_IRQHandler>
	...

08001258 <__libc_init_array>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	2600      	movs	r6, #0
 800125c:	4d0c      	ldr	r5, [pc, #48]	; (8001290 <__libc_init_array+0x38>)
 800125e:	4c0d      	ldr	r4, [pc, #52]	; (8001294 <__libc_init_array+0x3c>)
 8001260:	1b64      	subs	r4, r4, r5
 8001262:	10a4      	asrs	r4, r4, #2
 8001264:	42a6      	cmp	r6, r4
 8001266:	d109      	bne.n	800127c <__libc_init_array+0x24>
 8001268:	f000 f81a 	bl	80012a0 <_init>
 800126c:	2600      	movs	r6, #0
 800126e:	4d0a      	ldr	r5, [pc, #40]	; (8001298 <__libc_init_array+0x40>)
 8001270:	4c0a      	ldr	r4, [pc, #40]	; (800129c <__libc_init_array+0x44>)
 8001272:	1b64      	subs	r4, r4, r5
 8001274:	10a4      	asrs	r4, r4, #2
 8001276:	42a6      	cmp	r6, r4
 8001278:	d105      	bne.n	8001286 <__libc_init_array+0x2e>
 800127a:	bd70      	pop	{r4, r5, r6, pc}
 800127c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001280:	4798      	blx	r3
 8001282:	3601      	adds	r6, #1
 8001284:	e7ee      	b.n	8001264 <__libc_init_array+0xc>
 8001286:	f855 3b04 	ldr.w	r3, [r5], #4
 800128a:	4798      	blx	r3
 800128c:	3601      	adds	r6, #1
 800128e:	e7f2      	b.n	8001276 <__libc_init_array+0x1e>
 8001290:	080012b8 	.word	0x080012b8
 8001294:	080012b8 	.word	0x080012b8
 8001298:	080012b8 	.word	0x080012b8
 800129c:	080012bc 	.word	0x080012bc

080012a0 <_init>:
 80012a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012a2:	bf00      	nop
 80012a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012a6:	bc08      	pop	{r3}
 80012a8:	469e      	mov	lr, r3
 80012aa:	4770      	bx	lr

080012ac <_fini>:
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ae:	bf00      	nop
 80012b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012b2:	bc08      	pop	{r3}
 80012b4:	469e      	mov	lr, r3
 80012b6:	4770      	bx	lr
